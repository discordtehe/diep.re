@implementation VungleShapes

+(void)drawClose {
    r0 = UIGraphicsGetCurrentContext();
    CGContextSaveGState(r0);
    r0 = [UIBezierPath bezierPath];
    r0 = [r0 retain];
    [r0 moveToPoint:r2];
    [r0 addCurveToPoint:r2 controlPoint1:r3 controlPoint2:r4];
    [r0 addCurveToPoint:r2 controlPoint1:r3 controlPoint2:r4];
    [r0 addCurveToPoint:r2 controlPoint1:r3 controlPoint2:r4];
    [r0 addCurveToPoint:r2 controlPoint1:r3 controlPoint2:r4];
    [r0 closePath];
    [r0 moveToPoint:r2];
    [r0 addCurveToPoint:r2 controlPoint1:r3 controlPoint2:r4];
    [r0 addCurveToPoint:r2 controlPoint1:r3 controlPoint2:r4];
    [r0 addCurveToPoint:r2 controlPoint1:r3 controlPoint2:r4];
    [r0 addCurveToPoint:r2 controlPoint1:r3 controlPoint2:r4];
    [r0 closePath];
    [r0 moveToPoint:r2];
    CGContextSaveGState(r19);
    [r20 setUsesEvenOddFillRule:r2];
    r0 = [UIColor whiteColor];
    r0 = [r0 retain];
    [r0 setFill];
    [r0 release];
    [r20 fill];
    [r20 setLineWidth:r2];
    r0 = @class(UIColor);
    r0 = [r0 colorWithWhite:r2 alpha:r3];
    r0 = [r0 retain];
    [r0 setStroke];
    [r0 release];
    [r20 stroke];
    CGContextRestoreGState(r19);
    r0 = @class(UIBezierPath);
    r0 = [r0 bezierPathWithOvalInRect:r2];
    r0 = [r0 retain];
    var_A8 = r0;
    CGContextSaveGState(r19);
    CGContextTranslateCTM(r19, @selector(bezierPathWithOvalInRect:), 0x1);
    r0 = @class(UIColor);
    r0 = [r0 colorWithWhite:r2 alpha:r3];
    r0 = [r0 retain];
    [r0 setFill];
    [r0 release];
    [r26 fill];
    CGContextRestoreGState(r19);
    CGContextSaveGState(r19);
    CGContextTranslateCTM(r19, @selector(fill), 0x1);
    r0 = @class(UIBezierPath);
    r0 = [r0 bezierPath];
    r0 = [r0 retain];
    [r0 moveToPoint:r2];
    [r0 addLineToPoint:r2];
    CGContextSaveGState(r19);
    [r28 setLineCapStyle:r2];
    [r28 setLineWidth:r2];
    r0 = @class(UIColor);
    r0 = [r0 whiteColor];
    r0 = [r0 retain];
    [r0 setStroke];
    [r0 release];
    [r28 stroke];
    CGContextRestoreGState(r19);
    r0 = [UIBezierPath bezierPath];
    r0 = [r0 retain];
    [r0 moveToPoint:r2];
    [r0 addLineToPoint:r2];
    CGContextSaveGState(r19);
    CGContextTranslateCTM(r19, @selector(addLineToPoint:), 0x2);
    CGContextScaleCTM(r19, @selector(addLineToPoint:), 0x2);
    CGContextRotateCTM(r19, @selector(addLineToPoint:));
    CGContextTranslateCTM(r19, @selector(addLineToPoint:), 0x2);
    [r27 setLineCapStyle:0x2];
    [r27 setLineWidth:0x2];
    r0 = [UIColor whiteColor];
    r0 = [r0 retain];
    [r0 setStroke];
    [r0 release];
    [r27 stroke];
    CGContextRestoreGState(r19);
    CGContextRestoreGState(r19);
    [r27 release];
    [r28 release];
    CGContextRestoreGState(r19);
    [var_A8 release];
    [r20 release];
    return;
}

+(void)drawCallToAction {
    r0 = UIGraphicsGetCurrentContext();
    CGContextSaveGState(r0);
    r0 = [UIBezierPath bezierPath];
    r0 = [r0 retain];
    [r0 moveToPoint:r2];
    [r0 addCurveToPoint:r2 controlPoint1:r3 controlPoint2:r4];
    [r0 addCurveToPoint:r2 controlPoint1:r3 controlPoint2:r4];
    [r0 addCurveToPoint:r2 controlPoint1:r3 controlPoint2:r4];
    [r0 addCurveToPoint:r2 controlPoint1:r3 controlPoint2:r4];
    [r0 closePath];
    [r0 moveToPoint:r2];
    [r0 addCurveToPoint:r2 controlPoint1:r3 controlPoint2:r4];
    [r0 addCurveToPoint:r2 controlPoint1:r3 controlPoint2:r4];
    [r0 addCurveToPoint:r2 controlPoint1:r3 controlPoint2:r4];
    [r0 addCurveToPoint:r2 controlPoint1:r3 controlPoint2:r4];
    [r0 closePath];
    [r0 moveToPoint:r2];
    CGContextSaveGState(r19);
    [r23 setUsesEvenOddFillRule:r2];
    r0 = [UIColor whiteColor];
    r0 = [r0 retain];
    [r0 setFill];
    [r0 release];
    [r23 fill];
    CGContextSaveGState(r19);
    [r23 setLineWidth:r2];
    CGContextBeginPath(r19);
    r0 = objc_retainAutorelease(r23);
    var_A8 = r0;
    CGContextAddPath(r19, [r0 CGPath]);
    CGContextEOClip(r19);
    r0 = @class(UIColor);
    r0 = [r0 colorWithWhite:r2 alpha:r3];
    r0 = [r0 retain];
    [r0 setStroke];
    [r0 release];
    [r21 stroke];
    CGContextRestoreGState(r19);
    CGContextRestoreGState(r19);
    CGContextSaveGState(r19);
    CGContextTranslateCTM(r19, @selector(stroke), 0x1);
    r0 = @class(UIBezierPath);
    r0 = [r0 bezierPathWithOvalInRect:r2];
    r0 = [r0 retain];
    var_B0 = r0;
    CGContextSaveGState(r19);
    r0 = @class(UIColor);
    r0 = [r0 colorWithWhite:r2 alpha:r3];
    r0 = [r0 retain];
    [r0 setFill];
    [r0 release];
    [r26 fill];
    CGContextRestoreGState(r19);
    r0 = @class(UIBezierPath);
    r0 = [r0 bezierPath];
    r0 = [r0 retain];
    [r0 moveToPoint:r2];
    [r0 addLineToPoint:r2];
    CGContextSaveGState(r19);
    CGContextTranslateCTM(r19, @selector(addLineToPoint:), 0x1);
    [r28 setLineCapStyle:r2];
    [r28 setLineWidth:r2];
    r0 = @class(UIColor);
    r0 = [r0 whiteColor];
    r0 = [r0 retain];
    [r0 setStroke];
    [r0 release];
    [r28 stroke];
    CGContextRestoreGState(r19);
    r0 = @class(UIBezierPath);
    r0 = [r0 bezierPath];
    r0 = [r0 retain];
    [r0 moveToPoint:r2];
    [r0 addLineToPoint:r2];
    CGContextSaveGState(r19);
    CGContextTranslateCTM(r19, @selector(addLineToPoint:), 0x2);
    CGContextScaleCTM(r19, @selector(addLineToPoint:), 0x2);
    CGContextRotateCTM(r19, @selector(addLineToPoint:));
    CGContextTranslateCTM(r19, @selector(addLineToPoint:), 0x2);
    [r23 setLineCapStyle:r2];
    [r23 setLineWidth:r2];
    r0 = [UIColor whiteColor];
    r0 = [r0 retain];
    [r0 setStroke];
    [r0 release];
    [r23 stroke];
    CGContextRestoreGState(r19);
    r0 = [UIBezierPath bezierPath];
    r0 = [r0 retain];
    [r0 moveToPoint:r2];
    [r0 addLineToPoint:r2];
    CGContextSaveGState(r19);
    CGContextTranslateCTM(r19, @selector(addLineToPoint:), 0x2);
    [r22 setLineCapStyle:0x2];
    [r22 setLineWidth:0x2];
    r0 = [UIColor whiteColor];
    r0 = [r0 retain];
    [r0 setStroke];
    [r0 release];
    [r22 stroke];
    CGContextRestoreGState(r19);
    CGContextRestoreGState(r19);
    [r22 release];
    [r23 release];
    [r28 release];
    [var_B0 release];
    CGContextRestoreGState(r19);
    [var_A8 release];
    return;
}

+(void)drawMuteOn {
    r0 = UIGraphicsGetCurrentContext();
    CGContextSaveGState(r0);
    r0 = [UIBezierPath bezierPath];
    r0 = [r0 retain];
    [r0 moveToPoint:r2];
    [r0 addLineToPoint:r2];
    [r0 addLineToPoint:r2];
    [r0 addLineToPoint:r2];
    [r0 addLineToPoint:r2];
    [r0 addLineToPoint:r2];
    [r0 addLineToPoint:r2];
    [r0 closePath];
    [r0 moveToPoint:r2];
    [r0 addLineToPoint:r2];
    [r0 addLineToPoint:r2];
    [r0 addLineToPoint:r2];
    [r0 addLineToPoint:r2];
    [r0 addLineToPoint:r2];
    [r0 addLineToPoint:r2];
    [r0 addLineToPoint:r2];
    [r0 addLineToPoint:r2];
    [r0 addLineToPoint:r2];
    [r0 addLineToPoint:r2];
    [r0 addLineToPoint:r2];
    [r0 addLineToPoint:r2];
    [r0 addLineToPoint:r2];
    [r0 addLineToPoint:r2];
    [r0 closePath];
    [r0 moveToPoint:r2];
    CGContextSaveGState(r19);
    CGContextTranslateCTM(r19, @selector(moveToPoint:), r2);
    [r23 setUsesEvenOddFillRule:r2];
    r0 = [UIColor whiteColor];
    r0 = [r0 retain];
    [r0 setFill];
    [r0 release];
    [r23 fill];
    CGContextSaveGState(r19);
    [r23 setLineWidth:r2];
    CGContextBeginPath(r19);
    r0 = objc_retainAutorelease(r23);
    CGContextAddPath(r19, [r0 CGPath]);
    CGContextEOClip(r19);
    r0 = @class(UIColor);
    r0 = [r0 colorWithWhite:r2 alpha:r3];
    r0 = [r0 retain];
    [r0 setStroke];
    [r0 release];
    [r23 stroke];
    CGContextRestoreGState(r19);
    CGContextRestoreGState(r19);
    r0 = [UIBezierPath bezierPath];
    r0 = [r0 retain];
    [r0 moveToPoint:r2];
    [r0 addLineToPoint:r2];
    [r0 addLineToPoint:r2];
    [r0 addLineToPoint:r2];
    [r0 addLineToPoint:r2];
    [r0 addLineToPoint:r2];
    [r0 addLineToPoint:r2];
    [r0 addLineToPoint:r2];
    [r0 addLineToPoint:r2];
    [r0 addLineToPoint:r2];
    [r0 addLineToPoint:r2];
    [r0 addLineToPoint:r2];
    [r0 addLineToPoint:r2];
    [r0 addLineToPoint:r2];
    [r0 addLineToPoint:r2];
    [r0 closePath];
    [r0 moveToPoint:r2];
    CGContextSaveGState(r19);
    CGContextTranslateCTM(r19, @selector(moveToPoint:), 0x1);
    [r28 setUsesEvenOddFillRule:r2];
    r0 = @class(UIColor);
    r0 = [r0 colorWithWhite:r2 alpha:r3];
    r0 = [r0 retain];
    [r0 setFill];
    [r0 release];
    [r28 fill];
    CGContextRestoreGState(r19);
    [[UIBezierPath bezierPathWithRect:r2] retain];
    CGContextSaveGState(r19);
    CGContextTranslateCTM(r19, @selector(bezierPathWithRect:), 0x1);
    r0 = @class(UIColor);
    r0 = [r0 whiteColor];
    r0 = [r0 retain];
    [r0 setFill];
    [r0 release];
    [r20 fill];
    CGContextSaveGState(r19);
    [r20 setLineWidth:r2];
    CGContextBeginPath(r19);
    r0 = objc_retainAutorelease(r20);
    CGContextAddPath(r19, [r0 CGPath]);
    CGContextEOClip(r19);
    r0 = @class(UIColor);
    r0 = [r0 colorWithWhite:r2 alpha:r3];
    r0 = [r0 retain];
    [r0 setStroke];
    [r0 release];
    [r20 stroke];
    CGContextRestoreGState(r19);
    CGContextRestoreGState(r19);
    CGContextRestoreGState(r19);
    [r20 release];
    [r28 release];
    [r23 release];
    return;
}

+(void)drawMuteOff {
    r0 = UIGraphicsGetCurrentContext();
    CGContextSaveGState(r0);
    CGContextTranslateCTM(r19, _cmd, r2);
    r0 = [UIBezierPath bezierPath];
    r0 = [r0 retain];
    [r0 moveToPoint:r2];
    [r0 addLineToPoint:r2];
    [r0 addLineToPoint:r2];
    [r0 addLineToPoint:r2];
    [r0 addLineToPoint:r2];
    [r0 addLineToPoint:r2];
    [r0 addLineToPoint:r2];
    [r0 closePath];
    [r0 moveToPoint:r2];
    [r0 addLineToPoint:r2];
    [r0 addLineToPoint:r2];
    [r0 addLineToPoint:r2];
    [r0 addLineToPoint:r2];
    [r0 addLineToPoint:r2];
    [r0 addLineToPoint:r2];
    [r0 closePath];
    [r0 moveToPoint:r2];
    CGContextSaveGState(r19);
    [r27 setUsesEvenOddFillRule:r2];
    r0 = [UIColor whiteColor];
    r0 = [r0 retain];
    [r0 setFill];
    [r0 release];
    [r27 fill];
    CGContextSaveGState(r19);
    [r27 setLineWidth:r2];
    CGContextBeginPath(r19);
    r0 = objc_retainAutorelease(r27);
    CGContextAddPath(r19, [r0 CGPath]);
    CGContextEOClip(r19);
    r0 = @class(UIColor);
    r0 = [r0 colorWithWhite:r2 alpha:r3];
    r0 = [r0 retain];
    [r0 setStroke];
    [r0 release];
    [r27 stroke];
    CGContextRestoreGState(r19);
    CGContextRestoreGState(r19);
    r0 = [UIBezierPath bezierPath];
    r0 = [r0 retain];
    [r0 moveToPoint:r2];
    [r0 addLineToPoint:r2];
    [r0 addLineToPoint:r2];
    [r0 addLineToPoint:r2];
    [r0 addLineToPoint:r2];
    [r0 addLineToPoint:r2];
    [r0 addLineToPoint:r2];
    [r0 closePath];
    [r0 moveToPoint:r2];
    CGContextSaveGState(r19);
    CGContextTranslateCTM(r19, @selector(moveToPoint:), 0x1);
    [r22 setUsesEvenOddFillRule:0x1];
    r0 = [UIColor colorWithWhite:0x1 alpha:r3];
    r0 = [r0 retain];
    [r0 setFill];
    [r0 release];
    [r22 fill];
    CGContextRestoreGState(r19);
    CGContextRestoreGState(r19);
    [r22 release];
    [r27 release];
    return;
}

+(void)drawPrivacy {
    r0 = UIGraphicsGetCurrentContext();
    CGContextSaveGState(r0);
    CGContextSaveGState(r19);
    r0 = [UIBezierPath bezierPathWithRect:r2];
    r0 = [r0 retain];
    var_108 = r0;
    CGContextSaveGState(r19);
    CGContextTranslateCTM(r19, @selector(bezierPathWithRect:), r2);
    CGContextRestoreGState(r19);
    CGAffineTransformMakeTranslation(CGContextSaveGState(r19), @selector(bezierPathWithRect:));
    [r21 applyTransform:r2];
    [r21 addClip];
    r0 = @class(UIBezierPath);
    r0 = [r0 bezierPath];
    r0 = [r0 retain];
    [r0 moveToPoint:r2];
    [r0 addCurveToPoint:r2 controlPoint1:r3 controlPoint2:r4];
    [r0 addCurveToPoint:r2 controlPoint1:r3 controlPoint2:r4];
    [r0 addLineToPoint:r2];
    [r0 addCurveToPoint:r2 controlPoint1:r3 controlPoint2:r4];
    [r0 addCurveToPoint:r2 controlPoint1:r3 controlPoint2:r4];
    [r0 addLineToPoint:r2];
    [r0 closePath];
    [r0 moveToPoint:r2];
    [r0 addCurveToPoint:r2 controlPoint1:r3 controlPoint2:r4];
    [r0 addCurveToPoint:r2 controlPoint1:r3 controlPoint2:r4];
    [r0 addLineToPoint:r2];
    [r0 addCurveToPoint:r2 controlPoint1:r3 controlPoint2:r4];
    [r0 addCurveToPoint:r2 controlPoint1:r3 controlPoint2:r4];
    [r0 addLineToPoint:r2];
    [r0 closePath];
    [r0 moveToPoint:r2];
    CGContextSaveGState(r19);
    CGContextTranslateCTM(r19, @selector(moveToPoint:), &stack[-216]);
    [r24 setUsesEvenOddFillRule:r2];
    r0 = @class(UIColor);
    r0 = [r0 whiteColor];
    r0 = [r0 retain];
    [r0 setFill];
    [r0 release];
    [r24 fill];
    CGContextSaveGState(r19);
    [r24 setLineWidth:r2];
    CGContextBeginPath(r19);
    r0 = objc_retainAutorelease(r24);
    var_110 = r0;
    CGContextAddPath(r19, [r0 CGPath]);
    CGContextEOClip(r19);
    r0 = @class(UIColor);
    r0 = [r0 colorWithWhite:r2 alpha:r3];
    r0 = [r0 retain];
    [r0 setStroke];
    [r0 release];
    [r24 stroke];
    CGContextRestoreGState(r19);
    CGContextRestoreGState(r19);
    r0 = @class(UIBezierPath);
    r0 = [r0 bezierPathWithRoundedRect:r2 cornerRadius:r3];
    r0 = [r0 retain];
    var_120 = r0;
    CGContextSaveGState(r19);
    CGContextTranslateCTM(r19, @selector(bezierPathWithRoundedRect:cornerRadius:), 0x1);
    r0 = @class(UIColor);
    r0 = [r0 colorWithWhite:r2 alpha:r3];
    r0 = [r0 retain];
    [r0 setFill];
    [r0 release];
    [r24 fill];
    CGContextRestoreGState(r19);
    CGContextRestoreGState(r19);
    r0 = @class(UIBezierPath);
    r0 = [r0 bezierPath];
    r0 = [r0 retain];
    [r0 moveToPoint:r2];
    [r0 addCurveToPoint:r2 controlPoint1:r3 controlPoint2:r4];
    [r0 addLineToPoint:r2];
    [r0 addCurveToPoint:r2 controlPoint1:r3 controlPoint2:r4];
    [r0 addLineToPoint:r2];
    [r0 addCurveToPoint:r2 controlPoint1:r3 controlPoint2:r4];
    [r0 addLineToPoint:r2];
    [r0 addCurveToPoint:r2 controlPoint1:r3 controlPoint2:r4];
    [r0 addLineToPoint:r2];
    [r0 closePath];
    [r0 moveToPoint:r2];
    [r0 addCurveToPoint:r2 controlPoint1:r3 controlPoint2:r4];
    [r0 addLineToPoint:r2];
    [r0 addCurveToPoint:r2 controlPoint1:r3 controlPoint2:r4];
    [r0 addLineToPoint:r2];
    [r0 addCurveToPoint:r2 controlPoint1:r3 controlPoint2:r4];
    [r0 addLineToPoint:r2];
    [r0 addCurveToPoint:r2 controlPoint1:r3 controlPoint2:r4];
    [r0 addLineToPoint:r2];
    [r0 closePath];
    [r0 moveToPoint:r2];
    CGContextSaveGState(r19);
    CGContextTranslateCTM(r19, @selector(moveToPoint:), 0x1);
    [r27 setUsesEvenOddFillRule:r2];
    r0 = @class(UIColor);
    r0 = [r0 whiteColor];
    r0 = [r0 retain];
    [r0 setFill];
    [r0 release];
    [r27 fill];
    CGContextSaveGState(r19);
    [r27 setLineWidth:r2];
    CGContextBeginPath(r19);
    r0 = objc_retainAutorelease(r27);
    CGContextAddPath(r19, [r0 CGPath]);
    CGContextEOClip(r19);
    r0 = @class(UIColor);
    r0 = [r0 colorWithWhite:r2 alpha:r3];
    r0 = [r0 retain];
    [r0 setStroke];
    [r0 release];
    [r27 stroke];
    CGContextRestoreGState(r19);
    CGContextRestoreGState(r19);
    [[UIBezierPath bezierPathWithRoundedRect:r2 cornerRadius:r3] retain];
    CGContextSaveGState(r19);
    CGContextTranslateCTM(r19, @selector(bezierPathWithRoundedRect:cornerRadius:), 0x1);
    r0 = @class(UIColor);
    r0 = [r0 colorWithWhite:r2 alpha:r3];
    r0 = [r0 retain];
    [r0 setFill];
    [r0 release];
    [r25 fill];
    CGContextRestoreGState(r19);
    CGContextRestoreGState(r19);
    [r25 release];
    [r27 release];
    [var_120 release];
    [var_110 release];
    [var_108 release];
    r0 = @class(UIBezierPath);
    r0 = [r0 bezierPath];
    r0 = [r0 retain];
    [r0 moveToPoint:r2];
    [r0 addCurveToPoint:r2 controlPoint1:r3 controlPoint2:r4];
    [r0 addCurveToPoint:r2 controlPoint1:r3 controlPoint2:r4];
    [r0 addCurveToPoint:r2 controlPoint1:r3 controlPoint2:r4];
    [r0 addCurveToPoint:r2 controlPoint1:r3 controlPoint2:r4];
    [r0 addLineToPoint:r2];
    [r0 addLineToPoint:r2];
    [r0 addLineToPoint:r2];
    [r0 closePath];
    [r0 moveToPoint:r2];
    CGContextSaveGState(r19);
    CGContextTranslateCTM(r19, @selector(moveToPoint:), 0x1);
    [r24 setUsesEvenOddFillRule:0x1];
    r0 = [UIColor whiteColor];
    r0 = [r0 retain];
    [r0 setFill];
    [r0 release];
    [r24 fill];
    CGContextRestoreGState(r19);
    CGContextRestoreGState(r19);
    [r24 release];
    return;
}

@end