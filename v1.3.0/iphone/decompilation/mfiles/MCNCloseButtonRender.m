@implementation MCNCloseButtonRender

-(void *)initWithFrame:(struct CGRect)arg2 {
    memcpy(&r2, &arg2, 0x8);
    r31 = r31 - 0x30;
    var_10 = r20;
    stack[-24] = r19;
    saved_fp = r29;
    stack[-8] = r30;
    r0 = [[&var_20 super] initWithFrame:r2];
    r19 = r0;
    if (r0 != 0x0) {
            *(int8_t *)(int64_t *)&r19->pressed = 0x0;
            [r19 setOpaque:0x0];
            [r19 setAccessibilityIdentifier:@"NF_CLOSE_BUTTON"];
    }
    r0 = r19;
    return r0;
}

-(void)setPressed:(bool)arg2 {
    *(int8_t *)(int64_t *)&self->pressed = arg2;
    [self setNeedsDisplay];
    return;
}

-(void *)initWithCoder:(void *)arg2 {
    r31 = r31 - 0x30;
    var_10 = r20;
    stack[-24] = r19;
    saved_fp = r29;
    stack[-8] = r30;
    r0 = [[&var_20 super] initWithCoder:arg2];
    r19 = r0;
    if (r0 != 0x0) {
            *(int8_t *)(int64_t *)&r19->pressed = 0x0;
            [r19 setOpaque:0x0];
            [r19 setAccessibilityIdentifier:@"NF_CLOSE_BUTTON"];
    }
    r0 = r19;
    return r0;
}

-(struct CGSize)sizeThatFits:(struct CGSize)arg2 {
    memcpy(&r2, &arg2, 0x8);
    r0 = self;
    return r0;
}

-(bool)isPressed {
    r0 = *(int8_t *)(int64_t *)&self->pressed;
    return r0;
}

-(void)drawRect:(struct CGRect)arg2 {
    memcpy(&r2, &arg2, 0x8);
    var_A0 = d15;
    stack[-152] = d14;
    var_90 = d13;
    stack[-136] = d12;
    var_80 = d11;
    stack[-120] = d10;
    var_70 = d9;
    stack[-104] = d8;
    var_60 = r28;
    stack[-88] = r27;
    var_50 = r26;
    stack[-72] = r25;
    var_40 = r24;
    stack[-56] = r23;
    var_30 = r22;
    stack[-40] = r21;
    var_20 = r20;
    stack[-24] = r19;
    var_10 = r29;
    stack[-8] = r30;
    r31 = r31 + 0xffffffffffffff60 - 0x160;
    var_178 = self;
    *(&var_10 + 0xffffffffffffff60) = **___stack_chk_guard;
    [self bounds];
    r19 = UIGraphicsGetCurrentContext();
    r0 = CGColorSpaceCreateDeviceRGB();
    var_188 = r0;
    asm { fdiv       d12, d9, d0 };
    asm { fdiv       d11, d11, d0 };
    CGContextSaveGState(r19);
    CGContextTranslateCTM(r19, r1, r2);
    CGContextScaleCTM(r19, r1, r2);
    r0 = CGPathCreateMutable();
    r8 = 0x100bdf000;
    asm { fcvt       s0, d0 };
    asm { frinta     s0, s0 };
    asm { fcvt       d0, s0 };
    asm { fdiv       d0, d0, d9 };
    asm { fcvt       s1, d1 };
    asm { frinta     s1, s1 };
    asm { fcvt       d1, s1 };
    asm { fdiv       d1, d1, d9 };
    asm { fcvt       s2, d2 };
    asm { frinta     s2, s2 };
    asm { fcvt       d2, s2 };
    asm { fdiv       d2, d2, d9 };
    CGPathAddEllipseInRect(r0, 0x0, r2);
    var_168 = @selector(arrayWithCapacity:);
    [[NSMutableArray arrayWithCapacity:0x3] retain];
    r0 = [UIColor colorWithRed:r2 green:r3 blue:r4 alpha:r5];
    r0 = [r0 retain];
    r0 = objc_retainAutorelease(r0);
    [r0 CGColor];
    [r27 addObject:r2];
    *(r29 + 0xffffffffffffff48) = 0x3ff0000000000000;
    r24 = [objc_msgSend(@class(UIColor), r21) retain];
    [r20 release];
    r0 = objc_retainAutorelease(r24);
    objc_msgSend(r0, r25);
    objc_msgSend(r27, r26);
    *(r29 + 0xffffffffffffff50) = 0x3fc0831260000000;
    r0 = @class(UIColor);
    r0 = objc_msgSend(r0, r21);
    r24 = [r0 retain];
    [r20 release];
    r0 = objc_retainAutorelease(r24);
    objc_msgSend(r0, r25);
    objc_msgSend(r27, r26);
    *(r29 + 0xffffffffffffff58) = 0x0;
    CGGradientCreateWithColors(r23, r27, r29 - 0xb8);
    CGContextAddPath(r19, r22);
    CGContextSaveGState(r19);
    CGContextEOClip(r19);
    r0 = CGPathGetBoundingBox(r22);
    v11 = v0;
    v12 = v15;
    r0 = CGRectGetMidX(r0);
    v13 = v0;
    CGAffineTransformMakeTranslation(CGRectGetMidY(r0), r22);
    *(int128_t *)(r29 + 0xffffffffffffff20) = var_120;
    *(int128_t *)(r29 + 0xffffffffffffff30) = var_110;
    *(int128_t *)(r29 + 0xffffffffffffff10) = var_130;
    CGAffineTransformScale(&var_160, r22, r29 - 0xb8);
    *(int128_t *)(r29 + 0xffffffffffffff20) = var_120;
    *(int128_t *)(r29 + 0xffffffffffffff30) = var_110;
    *(int128_t *)(r29 + 0xffffffffffffff10) = var_130;
    var_120 = var_120;
    var_110 = var_110;
    CGContextConcatCTM(r19, &var_130);
    CGContextDrawRadialGradient(r19, r20, 0x3, r3, r4, r5, r6);
    CGContextRestoreGState(r19);
    CGGradientRelease(r20);
    CGPathRelease(r22);
    r0 = CGPathCreateMutable();
    r8 = 0x100bdf000;
    asm { fcvt       s0, d0 };
    asm { frinta     s0, s0 };
    asm { fcvt       d0, s0 };
    asm { fdiv       d0, d0, d9 };
    asm { fcvt       s1, d1 };
    asm { frinta     s1, s1 };
    asm { fcvt       d1, s1 };
    asm { fdiv       d1, d1, d9 };
    asm { fcvt       s2, d2 };
    asm { frinta     s2, s2 };
    asm { fcvt       d2, s2 };
    asm { fdiv       d2, d2, d9 };
    CGPathAddEllipseInRect(r0, 0x0, r2);
    r0 = *(&@class(MCConfigurationData) + 0x700);
    r0 = objc_msgSend(r0, r21);
    r20 = [r0 retain];
    [r28 release];
    [r20 setFill];
    CGContextAddPath(r19, r24);
    CGContextFillPath(r19);
    CGPathRelease(r24);
    r0 = CGPathCreateMutable();
    r8 = 0x100bdf000;
    asm { fcvt       s0, d0 };
    asm { frinta     s0, s0 };
    asm { fcvt       d0, s0 };
    asm { fdiv       d0, d0, d9 };
    asm { fcvt       s1, d1 };
    asm { frinta     s1, s1 };
    asm { fcvt       d1, s1 };
    asm { fdiv       d1, d1, d9 };
    asm { fcvt       s2, d2 };
    asm { frinta     s2, s2 };
    asm { fcvt       d2, s2 };
    var_170 = d9;
    asm { fdiv       d13, d2, d9 };
    CGPathAddEllipseInRect(r0, 0x0, r2);
    r23 = [objc_msgSend(@class(NSMutableArray), var_168) retain];
    [r27 release];
    r24 = [objc_msgSend(*(r22 + 0x700), r21) retain];
    [r20 release];
    r0 = objc_retainAutorelease(r24);
    objc_msgSend(r0, r25);
    objc_msgSend(r23, r26);
    *(r29 + 0xffffffffffffff48) = 0x3ff0000000000000;
    r24 = [objc_msgSend(*(r22 + 0x700), r21) retain];
    [r20 release];
    r0 = objc_retainAutorelease(r24);
    objc_msgSend(r0, r25);
    objc_msgSend(r23, r26);
    *(r29 + 0xffffffffffffff50) = 0x3fa60418a0000000;
    r0 = *(r22 + 0x700);
    d2 = *0x100bdf968;
    r0 = objc_msgSend(r0, r21);
    r29 = r29;
    r24 = [r0 retain];
    [r20 release];
    r0 = objc_retainAutorelease(r24);
    r27 = r0;
    objc_msgSend(r0, r25);
    r1 = r26;
    r26 = var_188;
    objc_msgSend(r23, r1);
    *(r29 + 0xffffffffffffff58) = 0x3fe2560420000000;
    CGGradientCreateWithColors(r26, r23, r29 - 0xb8);
    CGContextAddPath(r19, r28);
    CGContextSaveGState(r19);
    CGContextEOClip(r19);
    r0 = CGPathGetBoundingBox(r28);
    v14 = v12;
    v15 = v12;
    v9 = v12;
    r0 = CGRectGetMidX(r0);
    v10 = v0;
    r0 = CGRectGetMidY(r0);
    v0 = v10;
    CGAffineTransformMakeTranslation(r0, r28);
    *(int128_t *)(r29 + 0xffffffffffffff20) = var_120;
    *(int128_t *)(r29 + 0xffffffffffffff30) = var_110;
    *(int128_t *)(r29 + 0xffffffffffffff10) = var_130;
    CGAffineTransformScale(&var_160, r28, r29 - 0xb8);
    *(int128_t *)(r29 + 0xffffffffffffff20) = var_120;
    *(int128_t *)(r29 + 0xffffffffffffff30) = var_110;
    *(int128_t *)(r29 + 0xffffffffffffff10) = var_130;
    CGContextConcatCTM(r19, &var_130);
    v1 = v11;
    CGContextDrawRadialGradient(r19, r20, 0x3, r3, r4, r5, r6);
    CGContextRestoreGState(r19);
    CGGradientRelease(r20);
    CGPathRelease(r28);
    r1 = @selector(isPressed);
    if (objc_msgSend(var_178, r1) != 0x0) {
            var_190 = @selector(setFill);
            r2 = 0x3;
            r0 = CGPathCreateMutable();
            r8 = 0x100bdf000;
            d9 = var_170;
            asm { fcvt       s0, d0 };
            asm { frinta     s0, s0 };
            asm { fcvt       d0, s0 };
            asm { fdiv       d0, d0, d9 };
            asm { fcvt       s1, d1 };
            asm { frinta     s1, s1 };
            asm { fcvt       d1, s1 };
            asm { fdiv       d1, d1, d9 };
            CGPathAddEllipseInRect(r0, 0x0, r2);
            r0 = @class(UIColor);
            d2 = 0x0;
            r0 = objc_msgSend(r0, r21);
            r29 = r29;
            r24 = [r0 retain];
            [r27 release];
            r22 = var_190;
            objc_msgSend(r24, r22);
            r1 = r20;
            CGContextAddPath(r19, r1);
            CGContextFillPath(r19);
            CGPathRelease(r20);
            r27 = r24;
    }
    else {
            d9 = var_170;
            r22 = @selector(setFill);
    }
    CGContextSaveGState(r19);
    CGContextTranslateCTM(r19, r1, r2);
    CGContextRotateCTM(r19, r1);
    CGContextTranslateCTM(r19, r1, r2);
    r0 = CGPathCreateMutable();
    r8 = 0x100bdf000;
    d0 = *(r8 + 0x9b8);
    d0 = d9 * d0 + d14;
    asm { fcvt       s0, d0 };
    asm { frinta     s0, s0 };
    asm { fcvt       d0, s0 };
    asm { fdiv       d0, d0, d9 };
    d11 = *(r8 + 0x9c0);
    d1 = d9 * d11 + d14;
    asm { fcvt       s1, d1 };
    asm { frinta     s1, s1 };
    asm { fcvt       d1, s1 };
    asm { fdiv       d1, d1, d9 };
    CGPathMoveToPoint(r0, 0x0, r2, r3);
    r8 = 0x100bdf000;
    v2 = v1;
    asm { fcvt       s0, d0 };
    asm { frinta     s0, s0 };
    asm { fcvt       d0, s0 };
    asm { fdiv       d15, d0, d9 };
    asm { fcvt       s0, d0 };
    asm { frinta     s0, s0 };
    asm { fcvt       d0, s0 };
    asm { fdiv       d13, d0, d9 };
    d10 = *(r8 + 0x9d0);
    CGPathAddCurveToPoint(r24, 0x0, r2, r3, r4, r5, r6, r7);
    CGPathAddLineToPoint(r24, 0x0, r2, r3);
    r8 = 0x100bdf000;
    d12 = *(r8 + 0x9e0);
    asm { fcvt       s0, d0 };
    asm { frinta     s0, s0 };
    asm { fcvt       d0, s0 };
    asm { fdiv       d11, d0, d9 };
    CGPathAddCurveToPoint(r24, 0x0, r2, r3, r4, r5, r6, r7);
    asm { fcvt       s0, d0 };
    asm { frinta     s0, s0 };
    asm { fcvt       d0, s0 };
    asm { fdiv       d10, d0, d9 };
    CGPathAddLineToPoint(r24, 0x0, r2, r3);
    r8 = 0x100bdf000;
    d11 = *(r8 + 0x9f8);
    asm { fcvt       s0, d0 };
    asm { frinta     s0, s0 };
    asm { fcvt       d0, s0 };
    asm { fdiv       d14, d0, d9 };
    CGPathAddCurveToPoint(r24, 0x0, r2, r3, r4, r5, r6, r7);
    CGPathAddLineToPoint(r24, 0x0, r2, r3);
    CGPathAddCurveToPoint(r24, 0x0, r2, r3, r4, r5, r6, r7);
    CGPathAddLineToPoint(r24, 0x0, r2, r3);
    CGPathCloseSubpath(r24);
    r25 = [objc_msgSend(*(r20 + 0x700), r21) retain];
    [r27 release];
    objc_msgSend(r25, r22);
    CGContextAddPath(r19, r24);
    CGContextFillPath(r19);
    CGPathRelease(r24);
    CGContextRestoreGState(r19);
    CGContextSaveGState(r19);
    CGContextTranslateCTM(r19, r24, r2);
    CGContextRotateCTM(r19, r24);
    CGContextTranslateCTM(r19, r24, r2);
    r0 = CGPathCreateMutable();
    CGPathMoveToPoint(r0, 0x0, r2, r3);
    CGPathAddCurveToPoint(r24, 0x0, r2, r3, r4, r5, r6, r7);
    CGPathAddLineToPoint(r24, 0x0, r2, r3);
    CGPathAddCurveToPoint(r24, 0x0, r2, r3, r4, r5, r6, r7);
    CGPathAddLineToPoint(r24, 0x0, r2, r3);
    CGPathAddCurveToPoint(r24, 0x0, r2, r3, r4, r5, r6, r7);
    CGPathAddLineToPoint(r24, 0x0, r2, r3);
    CGPathAddCurveToPoint(r24, 0x0, r2, r3, r4, r5, r6, r7);
    CGPathAddLineToPoint(r24, 0x0, r2, r3);
    CGPathCloseSubpath(r24);
    r20 = [objc_msgSend(*(r20 + 0x700), r21) retain];
    [r25 release];
    objc_msgSend(r20, r22);
    CGContextAddPath(r19, r24);
    CGContextFillPath(r19);
    CGPathRelease(r24);
    CGContextRestoreGState(r19);
    CGContextRestoreGState(r19);
    CGColorSpaceRelease(r26);
    [r20 release];
    [r23 release];
    if (**___stack_chk_guard != *(r29 + 0xffffffffffffff60)) {
            __stack_chk_fail();
    }
    return;
}

@end