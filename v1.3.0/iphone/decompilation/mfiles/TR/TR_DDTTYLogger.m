@implementation TR_DDTTYLogger

+(void)getRed:(double *)arg2 green:(double *)arg3 blue:(double *)arg4 fromColor:(struct UIColor *)arg5 {
    r31 = r31 - 0x50;
    var_30 = r24;
    stack[-56] = r23;
    var_20 = r22;
    stack[-40] = r21;
    var_10 = r20;
    stack[-24] = r19;
    saved_fp = r29;
    stack[-8] = r30;
    r20 = arg4;
    r21 = arg3;
    r22 = arg2;
    r0 = [arg5 retain];
    r19 = r0;
    if ([r0 respondsToSelector:@selector(getRed:green:blue:alpha:), r3, r4, r5] == 0x0 || ([r19 getRed:r22 green:r21 blue:r20 alpha:0x0] & 0x1) == 0x0) {
            r23 = CGColorSpaceCreateDeviceRGB();
            r0 = CGBitmapContextCreate(&var_34, 0x1, 0x1, 0x8, 0x4, r23, 0x5);
            r24 = r0;
            CGContextSetFillColorWithColor(r24, [objc_retainAutorelease(r19) CGColor]);
            CGContextFillRect(r24, r1);
            if (r22 != 0x0) {
                    d0 = 0x0;
                    asm { ucvtf      s0, s0 };
                    asm { fdiv       s0, s0, s1 };
                    asm { fcvt       d0, s0 };
                    *r22 = d0;
            }
            if (r21 != 0x0) {
                    d0 = 0x0;
                    asm { ucvtf      s0, s0 };
                    asm { fdiv       s0, s0, s1 };
                    asm { fcvt       d0, s0 };
                    *r21 = d0;
            }
            if (r20 != 0x0) {
                    d0 = 0x0;
                    asm { ucvtf      s0, s0 };
                    asm { fdiv       s0, s0, s1 };
                    asm { fcvt       d0, s0 };
                    *r20 = d0;
            }
            CGContextRelease(r24);
            CGColorSpaceRelease(r23);
    }
    [r19 release];
    return;
}

+(void *)sharedInstance {
    r31 = r31 - 0x40;
    saved_fp = r29;
    stack[-8] = r30;
    if (*qword_1011d6df8 != -0x1) {
            dispatch_once(0x1011d6df8, &var_28);
    }
    r0 = *0x1011d6e08;
    r0 = objc_retainAutoreleaseReturnValue(r0);
    return r0;
}

+(unsigned long long)codeIndexForColor:(struct UIColor *)arg2 {
    r31 = r31 - 0x170;
    var_60 = d9;
    stack[-104] = d8;
    var_50 = r28;
    stack[-88] = r27;
    var_40 = r26;
    stack[-72] = r25;
    var_30 = r24;
    stack[-56] = r23;
    var_20 = r22;
    stack[-40] = r21;
    var_10 = r20;
    stack[-24] = r19;
    saved_fp = r29;
    stack[-8] = r30;
    r19 = self;
    [self getRed:r2 green:r3 blue:r4 fromColor:r5];
    var_130 = q0;
    r0 = *0x1011d6df0;
    r0 = [r0 retain];
    r21 = r0;
    r24 = [r0 countByEnumeratingWithState:r2 objects:r3 count:r4];
    if (r24 != 0x0) {
            r25 = 0x0;
            r23 = 0x0;
            r26 = *var_130;
            do {
                    r27 = 0x0;
                    do {
                            r28 = r25 + r27;
                            if (*var_130 != r26) {
                                    objc_enumerationMutation(r21);
                            }
                            [r19 getRed:r2 green:r3 blue:r4 fromColor:r5];
                            d0 = (var_158 - var_100) * (var_158 - var_100) + (var_148 - stack[-256]) * (var_148 - stack[-256]) + (var_150 - var_F8) * (var_150 - var_F8);
                            asm { fsqrt      d0, d0 };
                            if (d0 < d8) {
                                    asm { fcsel      d8, d0, d8, mi };
                            }
                            if (CPU_FLAGS & S) {
                                    if (!CPU_FLAGS & S) {
                                            r23 = r23;
                                    }
                                    else {
                                            r23 = r28;
                                    }
                            }
                            r27 = r27 + 0x1;
                    } while (r27 < r24);
                    r24 = [r21 countByEnumeratingWithState:r2 objects:r3 count:r4];
                    r25 = r25 + r27;
            } while (r24 != 0x0);
    }
    else {
            r23 = 0x0;
    }
    var_68 = **___stack_chk_guard;
    [r21 release];
    if (**___stack_chk_guard == var_68) {
            r0 = r23;
    }
    else {
            r0 = __stack_chk_fail();
    }
    return r0;
}

-(void)loadDefaultColorProfiles {
    r21 = [[UIColor colorWithRed:r2 green:r3 blue:r4 alpha:r5] retain];
    [self setForegroundColor:r21 backgroundColor:0x0 forFlag:0x1];
    [r21 release];
    r20 = [[UIColor colorWithRed:r21 green:0x0 blue:0x1 alpha:r5] retain];
    [self setForegroundColor:r20 backgroundColor:0x0 forFlag:0x2];
    [r20 release];
    return;
}

+(void)initialize_colors_16 {
    var_60 = d9;
    stack[-104] = d8;
    r31 = r31 + 0xffffffffffffff90;
    var_50 = r28;
    stack[-88] = r27;
    var_40 = r26;
    stack[-72] = r25;
    var_30 = r24;
    stack[-56] = r23;
    var_20 = r22;
    stack[-40] = r21;
    var_10 = r20;
    stack[-24] = r19;
    saved_fp = r29;
    stack[-8] = r30;
    r29 = &saved_fp;
    if (*0x1011d6de0 == 0x0) {
            asm { ccmp       x9, #0x0, #0x0, eq };
    }
    if (CPU_FLAGS & E) {
            asm { ccmp       x10, #0x0, #0x0, eq };
    }
    if (CPU_FLAGS & E) {
            r19 = [[NSMutableArray arrayWithCapacity:0x10] retain];
            r20 = [[NSMutableArray arrayWithCapacity:0x10] retain];
            r21 = [[NSMutableArray arrayWithCapacity:0x10] retain];
            [r19 addObject:@"30m"];
            [r19 addObject:@"31m"];
            [r19 addObject:@"32m"];
            [r19 addObject:@"33m"];
            [r19 addObject:@"34m"];
            [r19 addObject:@"35m"];
            [r19 addObject:@"36m"];
            [r19 addObject:@"37m"];
            [r19 addObject:@"1;30m"];
            [r19 addObject:@"1;31m"];
            [r19 addObject:@"1;32m"];
            [r19 addObject:@"1;33m"];
            [r19 addObject:@"1;34m"];
            [r19 addObject:@"1;35m"];
            [r19 addObject:@"1;36m"];
            [r19 addObject:@"1;37m"];
            [r20 addObject:@"40m"];
            [r20 addObject:@"41m"];
            [r20 addObject:@"42m"];
            [r20 addObject:@"43m"];
            [r20 addObject:@"44m"];
            [r20 addObject:@"45m"];
            [r20 addObject:@"46m"];
            [r20 addObject:@"47m"];
            [r20 addObject:@"1;40m"];
            [r20 addObject:@"1;41m"];
            [r20 addObject:@"1;42m"];
            [r20 addObject:@"1;43m"];
            [r20 addObject:@"1;44m"];
            [r20 addObject:@"1;45m"];
            [r20 addObject:@"1;46m"];
            [r20 addObject:@"1;47m"];
            r24 = [[UIColor colorWithRed:@"1;47m" green:r3 blue:r4 alpha:r5] retain];
            [r21 addObject:r24];
            [r24 release];
            r24 = [[UIColor colorWithRed:r24 green:r3 blue:r4 alpha:r5] retain];
            [r21 addObject:r24];
            [r24 release];
            r24 = [[UIColor colorWithRed:r24 green:r3 blue:r4 alpha:r5] retain];
            [r21 addObject:r24];
            [r24 release];
            r24 = [[UIColor colorWithRed:r24 green:r3 blue:r4 alpha:r5] retain];
            [r21 addObject:r24];
            [r24 release];
            r24 = [[UIColor colorWithRed:r24 green:r3 blue:r4 alpha:r5] retain];
            [r21 addObject:r24];
            [r24 release];
            r24 = [[UIColor colorWithRed:r24 green:r3 blue:r4 alpha:r5] retain];
            [r21 addObject:r24];
            [r24 release];
            r24 = [[UIColor colorWithRed:r24 green:r3 blue:r4 alpha:r5] retain];
            [r21 addObject:r24];
            [r24 release];
            r24 = [[UIColor colorWithRed:r24 green:r3 blue:r4 alpha:r5] retain];
            [r21 addObject:r24];
            [r24 release];
            r24 = [[UIColor colorWithRed:r24 green:r3 blue:r4 alpha:r5] retain];
            [r21 addObject:r24];
            [r24 release];
            r24 = [[UIColor colorWithRed:r24 green:r3 blue:r4 alpha:r5] retain];
            [r21 addObject:r24];
            [r24 release];
            r24 = [[UIColor colorWithRed:r24 green:r3 blue:r4 alpha:r5] retain];
            [r21 addObject:r24];
            [r24 release];
            r24 = [[UIColor colorWithRed:r24 green:r3 blue:r4 alpha:r5] retain];
            [r21 addObject:r24];
            [r24 release];
            r24 = [[UIColor colorWithRed:r24 green:r3 blue:r4 alpha:r5] retain];
            [r21 addObject:r24];
            [r24 release];
            r24 = [[UIColor colorWithRed:r24 green:r3 blue:r4 alpha:r5] retain];
            [r21 addObject:r24];
            [r24 release];
            r24 = [[UIColor colorWithRed:r24 green:r3 blue:r4 alpha:r5] retain];
            [r21 addObject:r24];
            [r24 release];
            r23 = [[UIColor colorWithRed:r24 green:r3 blue:r4 alpha:r5] retain];
            [r21 addObject:r23];
            [r23 release];
            r0 = [r19 copy];
            r8 = *0x1011d6de0;
            *0x1011d6de0 = r0;
            [r8 release];
            r0 = [r20 copy];
            r8 = *0x1011d6de8;
            *0x1011d6de8 = r0;
            [r8 release];
            r0 = [r21 copy];
            r8 = *0x1011d6df0;
            *0x1011d6df0 = r0;
            [r8 release];
            [r21 release];
            [r20 release];
            [r19 release];
    }
    return;
}

-(void *)init {
    r31 = r31 - 0x60;
    var_30 = r24;
    stack[-56] = r23;
    var_20 = r22;
    stack[-40] = r21;
    var_10 = r20;
    stack[-24] = r19;
    saved_fp = r29;
    stack[-8] = r30;
    r29 = &saved_fp;
    r19 = self;
    if (*qword_1011d6e08 == 0x0) goto loc_1003fdfa0;

loc_1003fdf78:
    r20 = 0x0;
    goto loc_1003fdf7c;

loc_1003fdf7c:
    [r19 release];
    r0 = r20;
    return r0;

loc_1003fdfa0:
    r0 = [[&var_40 super] init];
    r19 = r0;
    if (r19 == 0x0) goto loc_1003fe1f0;

loc_1003fdfc4:
    r19->_calendarUnitFlags = 0xfc;
    r0 = [NSProcessInfo processInfo];
    r0 = [r0 retain];
    r20 = r0;
    r0 = [r0 processName];
    r29 = r29;
    r0 = [r0 retain];
    r21 = (int64_t *)&r19->_appName;
    r8 = *r21;
    *r21 = r0;
    [r8 release];
    [r20 release];
    r0 = *r21;
    r0 = [r0 lengthOfBytesUsingEncoding:0x4];
    r22 = sign_extend_64(*(int32_t *)ivar_offset(_appLen));
    *(r19 + r22) = r0;
    if (r0 == 0x0) {
            objc_storeStrong(r21, @"<UnnamedApp>");
            r0 = *r21;
            r0 = [r0 lengthOfBytesUsingEncoding:0x4];
            *(r19 + r22) = r0;
    }
    r8 = malloc(r0 + 0x1);
    r23 = sign_extend_64(*(int32_t *)ivar_offset(_app));
    *(r19 + r23) = r8;
    if (r8 == 0x0) goto loc_1003fdf78;

loc_1003fe094:
    if (([*r21 getCString:r2 maxLength:r3 encoding:r4] & 0x1) == 0x0) goto loc_1003fe204;

loc_1003fe0bc:
    getpid();
    r0 = [NSString stringWithFormat:@"%i"];
    r0 = [r0 retain];
    r22 = sign_extend_64(*(int32_t *)ivar_offset(_processID));
    r8 = *(r19 + r22);
    *(r19 + r22) = r0;
    [r8 release];
    r0 = *(r19 + r22);
    r0 = [r0 lengthOfBytesUsingEncoding:0x4];
    r24 = sign_extend_64(*(int32_t *)ivar_offset(_pidLen));
    *(r19 + r24) = r0;
    r8 = malloc(r0 + 0x1);
    r20 = sign_extend_64(*(int32_t *)ivar_offset(_pid));
    *(r19 + r20) = r8;
    if (r8 == 0x0) goto loc_1003fe204;

loc_1003fe13c:
    if (([*(r19 + r22) getCString:r2 maxLength:r3 encoding:r4] & 0x1) == 0x0) goto loc_1003fe210;

loc_1003fe15c:
    *(int8_t *)(int64_t *)&r19->_colorsEnabled = 0x0;
    r0 = [NSMutableArray alloc];
    r0 = [r0 initWithCapacity:0x8];
    r9 = sign_extend_64(*(int32_t *)ivar_offset(_colorProfilesArray));
    r8 = *(r19 + r9);
    *(r19 + r9) = r0;
    [r8 release];
    r0 = [NSMutableDictionary alloc];
    r0 = [r0 initWithCapacity:0x8];
    r9 = sign_extend_64(*(int32_t *)ivar_offset(_colorProfilesDict));
    r8 = *(r19 + r9);
    *(r19 + r9) = r0;
    [r8 release];
    *(int8_t *)(int64_t *)&r19->_automaticallyAppendNewlineForCustomFormatters = 0x1;
    goto loc_1003fe1f0;

loc_1003fe1f0:
    r19 = [r19 retain];
    r20 = r19;
    goto loc_1003fdf7c;

loc_1003fe210:
    free(*(r19 + r23));
    r0 = *(r19 + r20);
    goto loc_1003fe208;

loc_1003fe208:
    free(r0);
    goto loc_1003fdf78;

loc_1003fe204:
    r0 = *(r19 + r23);
    goto loc_1003fe208;
}

-(bool)colorsEnabled {
    r0 = [TR_DDLog loggingQueue];
    r0 = [r0 retain];
    dispatch_sync(r0, &var_60);
    _Block_object_dispose(&var_30, 0x8);
    [r20 release];
    r0 = r19;
    return r0;
}

-(void)setColorsEnabled:(bool)arg2 {
    r0 = objc_retainBlock(&var_60);
    r21 = [[TR_DDLog loggingQueue] retain];
    [r0 retain];
    dispatch_async(r21, &var_90);
    [r20 release];
    [r19 release];
    [r21 release];
    return;
}

-(void)setForegroundColor:(struct UIColor *)arg2 backgroundColor:(struct UIColor *)arg3 forFlag:(unsigned long long)arg4 {
    r22 = [arg2 retain];
    [self setForegroundColor:r22 backgroundColor:arg3 forFlag:arg4 context:0x7fffffff];
    [r22 release];
    return;
}

-(void)setForegroundColor:(struct UIColor *)arg2 backgroundColor:(struct UIColor *)arg3 forFlag:(unsigned long long)arg4 context:(long long)arg5 {
    r31 = r31 - 0xe0;
    var_50 = d9;
    stack[-88] = d8;
    var_40 = r26;
    stack[-72] = r25;
    var_30 = r24;
    stack[-56] = r23;
    var_20 = r22;
    stack[-40] = r21;
    var_10 = r20;
    stack[-24] = r19;
    saved_fp = r29;
    stack[-8] = r30;
    r29 = &saved_fp;
    r21 = self;
    r20 = [arg2 retain];
    r24 = [arg3 retain];
    r19 = [r20 retain];
    var_78 = r19;
    r20 = [r24 retain];
    var_70 = r20;
    r0 = objc_retainBlock(&var_98);
    r22 = r0;
    if ([r21 isOnInternalLoggerQueue] != 0x0) {
            (*(r22 + 0x10))(r22);
    }
    else {
            r23 = [[TR_DDLog loggingQueue] retain];
            var_A0 = [r22 retain];
            dispatch_async(r23, &var_C8);
            [var_A0 release];
            [r23 release];
    }
    [r22 release];
    [var_70 release];
    [var_78 release];
    [r20 release];
    [r19 release];
    return;
}

-(void)setForegroundColor:(struct UIColor *)arg2 backgroundColor:(struct UIColor *)arg3 forTag:(void *)arg4 {
    r31 = r31 - 0xd0;
    var_50 = d9;
    stack[-88] = d8;
    var_40 = r26;
    stack[-72] = r25;
    var_30 = r24;
    stack[-56] = r23;
    var_20 = r22;
    stack[-40] = r21;
    var_10 = r20;
    stack[-24] = r19;
    saved_fp = r29;
    stack[-8] = r30;
    r29 = &saved_fp;
    r22 = self;
    r21 = [arg2 retain];
    r20 = [arg3 retain];
    r23 = [arg4 retain];
    r19 = [r21 retain];
    var_70 = r19;
    r20 = [r20 retain];
    var_68 = r20;
    r21 = [r23 retain];
    var_58 = r21;
    r0 = objc_retainBlock(&var_90);
    r23 = r0;
    if ([r22 isOnInternalLoggerQueue] != 0x0) {
            (*(r23 + 0x10))(r23);
    }
    else {
            r24 = [[TR_DDLog loggingQueue] retain];
            var_98 = [r23 retain];
            dispatch_async(r24, &var_C0);
            [var_98 release];
            [r24 release];
    }
    [r23 release];
    [var_58 release];
    [var_68 release];
    [var_70 release];
    [r21 release];
    [r20 release];
    [r19 release];
    return;
}

-(void)clearColorsForFlag:(unsigned long long)arg2 {
    [self clearColorsForFlag:arg2 context:0x0];
    return;
}

-(void)clearColorsForFlag:(unsigned long long)arg2 context:(long long)arg3 {
    r31 = r31 - 0xb0;
    var_30 = d9;
    stack[-56] = d8;
    var_20 = r22;
    stack[-40] = r21;
    var_10 = r20;
    stack[-24] = r19;
    saved_fp = r29;
    stack[-8] = r30;
    r29 = &saved_fp;
    r20 = self;
    r0 = objc_retainBlock(&var_68);
    r19 = r0;
    if ([r20 isOnInternalLoggerQueue] != 0x0) {
            (*(r19 + 0x10))(r19);
    }
    else {
            r21 = [[TR_DDLog loggingQueue] retain];
            var_70 = [r19 retain];
            dispatch_async(r21, &var_98);
            [var_70 release];
            [r21 release];
    }
    [r19 release];
    return;
}

-(void)clearColorsForTag:(void *)arg2 {
    r31 = r31 - 0xb0;
    var_40 = d9;
    stack[-72] = d8;
    var_30 = r24;
    stack[-56] = r23;
    var_20 = r22;
    stack[-40] = r21;
    var_10 = r20;
    stack[-24] = r19;
    saved_fp = r29;
    stack[-8] = r30;
    r29 = &saved_fp;
    r21 = self;
    r19 = [[arg2 retain] retain];
    var_48 = r19;
    r0 = objc_retainBlock(&var_70);
    r20 = r0;
    if ([r21 isOnInternalLoggerQueue] != 0x0) {
            (*(r20 + 0x10))(r20);
    }
    else {
            r22 = [[TR_DDLog loggingQueue] retain];
            var_78 = [r20 retain];
            dispatch_async(r22, &var_A0);
            [var_78 release];
            [r22 release];
    }
    [r20 release];
    [var_48 release];
    [r19 release];
    return;
}

+(void)initialize_colors_256 {
    if (*qword_1011d6de0 == 0x0) {
            asm { ccmp       x9, #0x0, #0x0, eq };
    }
    if (CPU_FLAGS & E) {
            asm { ccmp       x10, #0x0, #0x0, eq };
    }
    if (CPU_FLAGS & E) goto loc_1003f95d0;

.l6:
    return;

loc_1003f95d0:
    var_A0 = d15;
    stack[-152] = d14;
    r31 = r31 + 0xffffffffffffff60;
    var_90 = d13;
    stack[-136] = d12;
    var_80 = d11;
    stack[-120] = d10;
    var_70 = d9;
    stack[-104] = d8;
    var_60 = r28;
    stack[-88] = r27;
    var_50 = r26;
    stack[-72] = r25;
    var_40 = r24;
    stack[-56] = r23;
    var_30 = r22;
    stack[-40] = r21;
    var_20 = r20;
    stack[-24] = r19;
    var_10 = r29;
    stack[-8] = r30;
    r29 = &var_10;
    r31 = r31 - 0x350;
    r22 = &@class(MCConfigurationData);
    r0 = *(r22 + 0x40);
    r8 = 0x101137000;
    r21 = *(r8 + 0xf00);
    r1 = r21;
    r0 = objc_msgSend(r0, r1);
    r29 = r29;
    r0 = [r0 retain];
    r19 = r0;
    r0 = *(r22 + 0x40);
    r1 = r21;
    r0 = objc_msgSend(r0, r1);
    r29 = r29;
    r0 = [r0 retain];
    r20 = r0;
    r0 = *(r22 + 0x40);
    r1 = r21;
    r0 = objc_msgSend(r0, r1);
    r29 = r29;
    r0 = [r0 retain];
    r21 = r0;
    r25 = &@class(MCConfigurationData);
    r0 = *(r25 + 0x700);
    r8 = &@selector(wkWebView);
    r23 = *(r8 + 0x978);
    r8 = 0x100bdf000;
    d1 = *(r8 + 0xba0);
    *(r29 + 0xffffffffffffff40) = d1;
    r1 = r23;
    r0 = objc_msgSend(r0, r1);
    r0 = [r0 retain];
    r8 = 0x101137000;
    r22 = *(r8 + 0x6c0);
    r0 = r21;
    r1 = r22;
    objc_msgSend(r0, r1);
    r0 = r24;
    [r0 release];
    r0 = *(r25 + 0x700);
    r8 = 0x100bdf000;
    d0 = *(r8 + 0xc18);
    d2 = *(r8 + 0xc28);
    r1 = r23;
    r0 = objc_msgSend(r0, r1);
    r0 = [r0 retain];
    r0 = r21;
    r1 = r22;
    objc_msgSend(r0, r1);
    r0 = r24;
    [r0 release];
    r0 = *(r25 + 0x700);
    r8 = 0x100bdf000;
    d11 = *(r8 + 0xc30);
    d2 = *(r8 + 0xc40);
    r1 = r23;
    r0 = objc_msgSend(r0, r1);
    r0 = [r0 retain];
    r0 = r21;
    r1 = r22;
    objc_msgSend(r0, r1);
    r0 = r24;
    [r0 release];
    r0 = *(r25 + 0x700);
    r8 = 0x100bdf000;
    d2 = *(r8 + 0xc48);
    r1 = r23;
    r0 = objc_msgSend(r0, r1);
    r0 = [r0 retain];
    r0 = r21;
    r1 = r22;
    objc_msgSend(r0, r1);
    r0 = r24;
    [r0 release];
    r0 = *(r25 + 0x700);
    r8 = 0x100bdf000;
    d1 = *(r8 + 0xc58);
    *(r29 + 0xffffffffffffff28) = d1;
    d2 = *(r8 + 0xc60);
    *(r29 + 0xffffffffffffff38) = d2;
    r1 = r23;
    r0 = objc_msgSend(r0, r1);
    r0 = [r0 retain];
    r0 = r21;
    r1 = r22;
    objc_msgSend(r0, r1);
    r0 = r24;
    [r0 release];
    r0 = *(r25 + 0x700);
    r8 = 0x100bdf000;
    d0 = *(r8 + 0xbd0);
    r8 = 0x100b9b000;
    d14 = *(r8 + 0x488);
    *(r29 + 0xffffffffffffff08) = d14;
    r1 = r23;
    r0 = objc_msgSend(r0, r1);
    r0 = [r0 retain];
    r0 = r21;
    r1 = r22;
    objc_msgSend(r0, r1);
    r0 = r24;
    [r0 release];
    r0 = *(r25 + 0x700);
    r8 = 0x100bdf000;
    d13 = *(r8 + 0xb08);
    r1 = r23;
    r0 = objc_msgSend(r0, r1);
    r0 = [r0 retain];
    r0 = r21;
    r1 = r22;
    objc_msgSend(r0, r1);
    r0 = r24;
    [r0 release];
    r0 = *(r25 + 0x700);
    r8 = 0x100bdf000;
    d1 = *(r8 + 0xc70);
    r1 = r23;
    r0 = objc_msgSend(r0, r1);
    r0 = [r0 retain];
    r0 = r21;
    r1 = r22;
    objc_msgSend(r0, r1);
    r0 = r24;
    [r0 release];
    r0 = *(r25 + 0x700);
    r8 = 0x100bdf000;
    d1 = *(r8 + 0xc78);
    d2 = *(r8 + 0xc80);
    r1 = r23;
    r0 = objc_msgSend(r0, r1);
    r0 = [r0 retain];
    r0 = r21;
    r1 = r22;
    objc_msgSend(r0, r1);
    r0 = r24;
    [r0 release];
    r0 = *(r25 + 0x700);
    r8 = 0x100bdf000;
    d0 = *(r8 + 0xb48);
    *(r29 + 0xffffffffffffff30) = d0;
    d1 = *(r8 + 0xc88);
    *(r29 + 0xffffffffffffff48) = d1;
    d2 = *(r8 + 0xc90);
    r1 = r23;
    r0 = objc_msgSend(r0, r1);
    r0 = [r0 retain];
    r0 = r21;
    r1 = r22;
    objc_msgSend(r0, r1);
    r0 = r24;
    [r0 release];
    r0 = *(r25 + 0x700);
    r8 = 0x100bdf000;
    d0 = *(r8 + 0xc98);
    *(r29 + 0xffffffffffffff60) = d0;
    d1 = *(r8 + 0xca0);
    d2 = *(r8 + 0xca8);
    r1 = r23;
    r0 = objc_msgSend(r0, r1);
    r0 = [r0 retain];
    r0 = r21;
    r1 = r22;
    objc_msgSend(r0, r1);
    r0 = r24;
    [r0 release];
    r0 = *(r25 + 0x700);
    r8 = 0x100bdf000;
    d1 = *(r8 + 0xcb0);
    r1 = r23;
    r0 = objc_msgSend(r0, r1);
    r0 = [r0 retain];
    r0 = r21;
    r1 = r22;
    objc_msgSend(r0, r1);
    r0 = r24;
    [r0 release];
    r0 = *(r25 + 0x700);
    r8 = 0x100bdf000;
    d1 = *(r8 + 0xcb8);
    r1 = r23;
    r0 = objc_msgSend(r0, r1);
    r0 = [r0 retain];
    r0 = r21;
    r1 = r22;
    objc_msgSend(r0, r1);
    r0 = r24;
    [r0 release];
    r0 = *(r25 + 0x700);
    r8 = 0x100bdf000;
    d12 = *(r8 + 0xb28);
    d9 = *(r8 + 0xcc8);
    d2 = *(r8 + 0xcd0);
    *(r29 + 0xffffffffffffff50) = d12;
    r1 = r23;
    r0 = objc_msgSend(r0, r1);
    r0 = [r0 retain];
    r0 = r21;
    r1 = r22;
    objc_msgSend(r0, r1);
    r0 = r24;
    [r0 release];
    r0 = *(r25 + 0x700);
    r8 = 0x100bdf000;
    d1 = *(r8 + 0xcd8);
    *(r29 + 0xffffffffffffff18) = d1;
    r1 = r23;
    r0 = objc_msgSend(r0, r1);
    r0 = [r0 retain];
    r0 = r21;
    r1 = r22;
    objc_msgSend(r0, r1);
    r0 = r24;
    [r0 release];
    r0 = *(r25 + 0x700);
    r8 = 0x100bdf000;
    d1 = *(r8 + 0xce0);
    d2 = *(r8 + 0xce8);
    r1 = r23;
    r0 = objc_msgSend(r0, r1);
    r0 = [r0 retain];
    r0 = r21;
    r1 = r22;
    objc_msgSend(r0, r1);
    r0 = r24;
    [r0 release];
    r0 = *(r25 + 0x700);
    r8 = 0x100bdf000;
    d1 = *(r8 + 0xcf8);
    *(r29 + 0xffffffffffffff68) = d1;
    d2 = *(r8 + 0xbf8);
    *(r29 + 0xffffffffffffff00) = d2;
    r1 = r23;
    r0 = objc_msgSend(r0, r1);
    r0 = [r0 retain];
    r0 = r21;
    r1 = r22;
    objc_msgSend(r0, r1);
    r0 = r24;
    [r0 release];
    r0 = *(r25 + 0x700);
    r8 = 0x100bdf000;
    d0 = *(r8 + 0xd00);
    *(r29 + 0xffffffffffffff20) = d0;
    d1 = *(r8 + 0xd08);
    r1 = r23;
    r0 = objc_msgSend(r0, r1);
    r0 = [r0 retain];
    r0 = r21;
    r1 = r22;
    objc_msgSend(r0, r1);
    r0 = r24;
    [r0 release];
    r0 = *(r25 + 0x700);
    r8 = 0x100bdf000;
    d14 = *(r8 + 0xd10);
    r1 = r23;
    r0 = objc_msgSend(r0, r1);
    r0 = [r0 retain];
    r0 = r21;
    r1 = r22;
    objc_msgSend(r0, r1);
    r0 = r24;
    [r0 release];
    r0 = *(r25 + 0x700);
    r8 = 0x100bdf000;
    d0 = *(r8 + 0xd18);
    d2 = *(r8 + 0xd20);
    r1 = r23;
    r0 = objc_msgSend(r0, r1);
    r0 = [r0 retain];
    r0 = r21;
    r1 = r22;
    objc_msgSend(r0, r1);
    r0 = r24;
    [r0 release];
    r0 = *(r25 + 0x700);
    r8 = 0x100bdf000;
    d2 = *(r8 + 0xd30);
    r1 = r23;
    r0 = objc_msgSend(r0, r1);
    r0 = [r0 retain];
    r0 = r21;
    r1 = r22;
    objc_msgSend(r0, r1);
    r0 = r24;
    [r0 release];
    r0 = *(r25 + 0x700);
    r1 = r23;
    r0 = objc_msgSend(r0, r1);
    r0 = [r0 retain];
    r0 = r21;
    r1 = r22;
    objc_msgSend(r0, r1);
    r0 = r24;
    [r0 release];
    r0 = *(r25 + 0x700);
    r8 = 0x100bdf000;
    d0 = *(r8 + 0xd38);
    d2 = *(r8 + 0xc08);
    r1 = r23;
    r0 = objc_msgSend(r0, r1);
    r0 = [r0 retain];
    r0 = r21;
    r1 = r22;
    objc_msgSend(r0, r1);
    r0 = r24;
    [r0 release];
    r0 = *(r25 + 0x700);
    r8 = 0x100bdf000;
    d1 = *(r8 + 0xd40);
    *(r29 + 0xffffffffffffff58) = d1;
    r1 = r23;
    r0 = objc_msgSend(r0, r1);
    r0 = [r0 retain];
    r0 = r21;
    r1 = r22;
    objc_msgSend(r0, r1);
    r0 = r24;
    [r0 release];
    r0 = *(r25 + 0x700);
    r8 = 0x100bdf000;
    d2 = *(r8 + 0xbc8);
    r1 = r23;
    r0 = objc_msgSend(r0, r1);
    r0 = [r0 retain];
    r0 = r21;
    r1 = r22;
    objc_msgSend(r0, r1);
    r0 = r24;
    [r0 release];
    r0 = *(r25 + 0x700);
    r8 = 0x100bdf000;
    d9 = *(r8 + 0xd50);
    d2 = *(r8 + 0xd58);
    r1 = r23;
    r0 = objc_msgSend(r0, r1);
    r0 = [r0 retain];
    r0 = r21;
    r1 = r22;
    objc_msgSend(r0, r1);
    r0 = r24;
    [r0 release];
    r0 = *(r25 + 0x700);
    r8 = 0x100bdf000;
    d13 = *(r8 + 0xd60);
    d2 = *(r8 + 0xd68);
    r1 = r23;
    r0 = objc_msgSend(r0, r1);
    r0 = [r0 retain];
    r0 = r21;
    r1 = r22;
    objc_msgSend(r0, r1);
    r0 = r24;
    [r0 release];
    r0 = *(r25 + 0x700);
    r8 = 0x100bdf000;
    d2 = *(r8 + 0xd78);
    r1 = r23;
    r0 = objc_msgSend(r0, r1);
    r0 = [r0 retain];
    r0 = r21;
    r1 = r22;
    objc_msgSend(r0, r1);
    r0 = r24;
    [r0 release];
    r0 = *(r25 + 0x700);
    r8 = 0x100bdf000;
    d0 = *(r8 + 0xb00);
    r1 = r23;
    r0 = objc_msgSend(r0, r1);
    r0 = [r0 retain];
    r0 = r21;
    r1 = r22;
    objc_msgSend(r0, r1);
    r0 = r24;
    [r0 release];
    r0 = *(r25 + 0x700);
    r8 = 0x100bdf000;
    d1 = *(r8 + 0xd80);
    r1 = r23;
    r0 = objc_msgSend(r0, r1);
    r0 = [r0 retain];
    r0 = r21;
    r1 = r22;
    objc_msgSend(r0, r1);
    r0 = r24;
    [r0 release];
    r0 = *(r25 + 0x700);
    r8 = 0x100bdf000;
    d10 = *(r8 + 0xd90);
    r1 = r23;
    r0 = objc_msgSend(r0, r1);
    r0 = [r0 retain];
    r0 = r21;
    r1 = r22;
    objc_msgSend(r0, r1);
    r0 = r24;
    [r0 release];
    r0 = *(r25 + 0x700);
    r8 = 0x100bdf000;
    d2 = *(r8 + 0xd98);
    *(r29 + 0xffffffffffffff40) = d10;
    r1 = r23;
    r0 = objc_msgSend(r0, r1);
    r0 = [r0 retain];
    r0 = r21;
    r1 = r22;
    objc_msgSend(r0, r1);
    r0 = r24;
    [r0 release];
    r0 = *(r25 + 0x700);
    r8 = 0x100bdf000;
    d2 = *(r8 + 0xda0);
    r1 = r23;
    r0 = objc_msgSend(r0, r1);
    r0 = [r0 retain];
    r0 = r21;
    r1 = r22;
    objc_msgSend(r0, r1);
    r0 = r24;
    [r0 release];
    r0 = *(r25 + 0x700);
    r8 = 0x100bdf000;
    d2 = *(r8 + 0xdb0);
    *(r29 + 0xffffffffffffff28) = d2;
    r1 = r23;
    r0 = objc_msgSend(r0, r1);
    r0 = [r0 retain];
    r0 = r21;
    r1 = r22;
    objc_msgSend(r0, r1);
    r0 = r24;
    [r0 release];
    r0 = *(r25 + 0x700);
    r1 = r23;
    r0 = objc_msgSend(r0, r1);
    r0 = [r0 retain];
    r0 = r21;
    r1 = r22;
    objc_msgSend(r0, r1);
    r0 = r24;
    [r0 release];
    r0 = *(r25 + 0x700);
    r8 = 0x100bdf000;
    d2 = *(r8 + 0xb88);
    *(r29 + 0xffffffffffffff10) = d2;
    r1 = r23;
    r0 = objc_msgSend(r0, r1);
    r0 = [r0 retain];
    r0 = r21;
    r1 = r22;
    objc_msgSend(r0, r1);
    r0 = r24;
    [r0 release];
    r0 = *(r25 + 0x700);
    r1 = r23;
    r0 = objc_msgSend(r0, r1);
    r0 = [r0 retain];
    r0 = r21;
    r1 = r22;
    objc_msgSend(r0, r1);
    r0 = r24;
    [r0 release];
    r0 = *(r25 + 0x700);
    r8 = 0x100bdf000;
    d0 = *(r8 + 0xdc0);
    r1 = r23;
    r0 = objc_msgSend(r0, r1);
    r0 = [r0 retain];
    r0 = r21;
    r1 = r22;
    objc_msgSend(r0, r1);
    r0 = r24;
    [r0 release];
    r0 = *(r25 + 0x700);
    r8 = 0x100bdf000;
    d14 = *(r8 + 0xdc8);
    d13 = *(r8 + 0xdd0);
    d2 = *(r8 + 0xdd8);
    *(r29 + 0xffffffffffffff08) = d2;
    r1 = r23;
    r0 = objc_msgSend(r0, r1);
    r0 = [r0 retain];
    r0 = r21;
    r1 = r22;
    objc_msgSend(r0, r1);
    r0 = r24;
    [r0 release];
    r0 = *(r25 + 0x700);
    r8 = 0x100bdf000;
    d10 = *(r8 + 0xde0);
    d2 = *(r8 + 0xde8);
    r1 = r23;
    r0 = objc_msgSend(r0, r1);
    r0 = [r0 retain];
    r0 = r21;
    r1 = r22;
    objc_msgSend(r0, r1);
    r0 = r24;
    [r0 release];
    r0 = *(r25 + 0x700);
    r1 = r23;
    r0 = objc_msgSend(r0, r1);
    r0 = [r0 retain];
    r0 = r21;
    r1 = r22;
    objc_msgSend(r0, r1);
    r0 = r24;
    [r0 release];
    r0 = *(r25 + 0x700);
    r1 = r23;
    r0 = objc_msgSend(r0, r1);
    r0 = [r0 retain];
    r0 = r21;
    r1 = r22;
    objc_msgSend(r0, r1);
    r0 = r24;
    [r0 release];
    r0 = *(r25 + 0x700);
    r1 = r23;
    r0 = objc_msgSend(r0, r1);
    r0 = [r0 retain];
    r0 = r21;
    r1 = r22;
    objc_msgSend(r0, r1);
    r0 = r24;
    [r0 release];
    r0 = *(r25 + 0x700);
    r1 = r23;
    r0 = objc_msgSend(r0, r1);
    r0 = [r0 retain];
    r0 = r21;
    r1 = r22;
    objc_msgSend(r0, r1);
    r0 = r24;
    [r0 release];
    r0 = *(r25 + 0x700);
    r8 = 0x100bdf000;
    d10 = *(r8 + 0xdf0);
    r1 = r23;
    r0 = objc_msgSend(r0, r1);
    r0 = [r0 retain];
    r0 = r21;
    r1 = r22;
    objc_msgSend(r0, r1);
    r0 = r24;
    [r0 release];
    r0 = *(r25 + 0x700);
    r8 = 0x100bdf000;
    d2 = *(r8 + 0xe00);
    r1 = r23;
    r0 = objc_msgSend(r0, r1);
    r0 = [r0 retain];
    r0 = r21;
    r1 = r22;
    objc_msgSend(r0, r1);
    r0 = r24;
    [r0 release];
    r0 = *(r25 + 0x700);
    r8 = 0x100bdf000;
    d2 = *(r8 + 0xe08);
    r1 = r23;
    r0 = objc_msgSend(r0, r1);
    r0 = [r0 retain];
    r0 = r21;
    r1 = r22;
    objc_msgSend(r0, r1);
    r0 = r24;
    [r0 release];
    r0 = *(r25 + 0x700);
    r1 = r23;
    r0 = objc_msgSend(r0, r1);
    r0 = [r0 retain];
    r0 = r21;
    r1 = r22;
    objc_msgSend(r0, r1);
    r0 = r24;
    [r0 release];
    r0 = *(r25 + 0x700);
    r8 = 0x100bdf000;
    d0 = *(r8 + 0xe10);
    r1 = r23;
    r0 = objc_msgSend(r0, r1);
    r0 = [r0 retain];
    r0 = r21;
    r1 = r22;
    objc_msgSend(r0, r1);
    r0 = r24;
    [r0 release];
    r0 = *(r25 + 0x700);
    r8 = 0x100bdf000;
    d2 = *(r8 + 0xe20);
    r1 = r23;
    r0 = objc_msgSend(r0, r1);
    r0 = [r0 retain];
    r0 = r21;
    r1 = r22;
    objc_msgSend(r0, r1);
    r0 = r24;
    [r0 release];
    r0 = *(r25 + 0x700);
    r1 = r23;
    r0 = objc_msgSend(r0, r1);
    r0 = [r0 retain];
    r0 = r21;
    r1 = r22;
    objc_msgSend(r0, r1);
    r0 = r24;
    [r0 release];
    r0 = *(r25 + 0x700);
    r8 = 0x100bdf000;
    d2 = *(r8 + 0xe28);
    r1 = r23;
    r0 = objc_msgSend(r0, r1);
    r0 = [r0 retain];
    r0 = r21;
    r1 = r22;
    objc_msgSend(r0, r1);
    r0 = r24;
    [r0 release];
    r0 = *(r25 + 0x700);
    r8 = 0x100bdf000;
    d0 = *(r8 + 0xe30);
    r1 = r23;
    r0 = objc_msgSend(r0, r1);
    r0 = [r0 retain];
    r0 = r21;
    r1 = r22;
    objc_msgSend(r0, r1);
    r0 = r24;
    [r0 release];
    r0 = *(r25 + 0x700);
    r1 = r23;
    r0 = objc_msgSend(r0, r1);
    r0 = [r0 retain];
    r0 = r21;
    r1 = r22;
    objc_msgSend(r0, r1);
    r0 = r24;
    [r0 release];
    r0 = *(r25 + 0x700);
    r8 = 0x100bdf000;
    d0 = *(r8 + 0xe40);
    r1 = r23;
    r0 = objc_msgSend(r0, r1);
    r0 = [r0 retain];
    r0 = r21;
    r1 = r22;
    objc_msgSend(r0, r1);
    r0 = r24;
    [r0 release];
    r0 = *(r25 + 0x700);
    r8 = 0x100bdf000;
    d0 = *(r8 + 0xe48);
    d2 = *(r8 + 0xe50);
    r1 = r23;
    r0 = objc_msgSend(r0, r1);
    r0 = [r0 retain];
    r0 = r21;
    r1 = r22;
    objc_msgSend(r0, r1);
    r0 = r24;
    [r0 release];
    r0 = *(r25 + 0x700);
    r8 = 0x100bdf000;
    d0 = *(r8 + 0xe58);
    d2 = *(r8 + 0xe60);
    r1 = r23;
    r0 = objc_msgSend(r0, r1);
    r0 = [r0 retain];
    r0 = r21;
    r1 = r22;
    objc_msgSend(r0, r1);
    r0 = r24;
    [r0 release];
    r0 = *(r25 + 0x700);
    r1 = r23;
    r0 = objc_msgSend(r0, r1);
    r0 = [r0 retain];
    r0 = r21;
    r1 = r22;
    objc_msgSend(r0, r1);
    r0 = r24;
    [r0 release];
    r0 = *(r25 + 0x700);
    r8 = 0x100bdf000;
    d2 = *(r8 + 0xbb8);
    r1 = r23;
    r0 = objc_msgSend(r0, r1);
    r0 = [r0 retain];
    r0 = r21;
    r1 = r22;
    objc_msgSend(r0, r1);
    r0 = r24;
    [r0 release];
    r0 = *(r25 + 0x700);
    r8 = 0x100bdf000;
    d1 = *(r8 + 0xe70);
    *(r29 + 0xffffffffffffff50) = d1;
    r1 = r23;
    r0 = objc_msgSend(r0, r1);
    r0 = [r0 retain];
    r0 = r21;
    r1 = r22;
    objc_msgSend(r0, r1);
    r0 = r24;
    [r0 release];
    r0 = *(r25 + 0x700);
    r8 = 0x100bdf000;
    d13 = *(r8 + 0xe78);
    r1 = r23;
    r0 = objc_msgSend(r0, r1);
    r0 = [r0 retain];
    r0 = r21;
    r1 = r22;
    objc_msgSend(r0, r1);
    r0 = r24;
    [r0 release];
    r0 = *(r25 + 0x700);
    r1 = r23;
    r0 = objc_msgSend(r0, r1);
    r0 = [r0 retain];
    r0 = r21;
    r1 = r22;
    objc_msgSend(r0, r1);
    r0 = r24;
    [r0 release];
    r0 = *(r25 + 0x700);
    r8 = 0x100bdf000;
    d2 = *(r8 + 0xe80);
    r1 = r23;
    r0 = objc_msgSend(r0, r1);
    r0 = [r0 retain];
    r0 = r21;
    r1 = r22;
    objc_msgSend(r0, r1);
    r0 = r24;
    [r0 release];
    r0 = *(r25 + 0x700);
    r8 = 0x100bdf000;
    d2 = *(r8 + 0xb10);
    r1 = r23;
    r0 = objc_msgSend(r0, r1);
    r0 = [r0 retain];
    r0 = r21;
    r1 = r22;
    objc_msgSend(r0, r1);
    r0 = r24;
    [r0 release];
    r0 = *(r25 + 0x700);
    r8 = 0x100bdf000;
    d11 = *(r8 + 0xe90);
    r1 = r23;
    r0 = objc_msgSend(r0, r1);
    r0 = [r0 retain];
    r0 = r21;
    r1 = r22;
    objc_msgSend(r0, r1);
    r0 = r24;
    [r0 release];
    r0 = *(r25 + 0x700);
    r8 = 0x100bdf000;
    d1 = *(r8 + 0xe98);
    *(r29 + 0xffffffffffffff48) = d1;
    r1 = r23;
    r0 = objc_msgSend(r0, r1);
    r0 = [r0 retain];
    r0 = r21;
    r1 = r22;
    objc_msgSend(r0, r1);
    r0 = r24;
    [r0 release];
    r0 = *(r25 + 0x700);
    r8 = 0x100bdf000;
    d0 = *(r8 + 0xea0);
    d11 = *(r8 + 0xbb0);
    r1 = r23;
    r0 = objc_msgSend(r0, r1);
    r0 = [r0 retain];
    r0 = r21;
    r1 = r22;
    objc_msgSend(r0, r1);
    r0 = r24;
    [r0 release];
    r0 = *(r25 + 0x700);
    r1 = r23;
    r0 = objc_msgSend(r0, r1);
    r0 = [r0 retain];
    r0 = r21;
    r1 = r22;
    objc_msgSend(r0, r1);
    r0 = r24;
    [r0 release];
    r0 = *(r25 + 0x700);
    r8 = 0x100bdf000;
    d0 = *(r8 + 0xeb0);
    r1 = r23;
    r0 = objc_msgSend(r0, r1);
    r0 = [r0 retain];
    r0 = r21;
    r1 = r22;
    objc_msgSend(r0, r1);
    r0 = r24;
    [r0 release];
    r0 = *(r25 + 0x700);
    r1 = r23;
    r0 = objc_msgSend(r0, r1);
    r0 = [r0 retain];
    r0 = r21;
    r1 = r22;
    objc_msgSend(r0, r1);
    r0 = r24;
    [r0 release];
    r0 = *(r25 + 0x700);
    r8 = 0x100bdf000;
    d0 = *(r8 + 0xec0);
    d2 = *(r8 + 0xec8);
    r1 = r23;
    r0 = objc_msgSend(r0, r1);
    r0 = [r0 retain];
    r0 = r21;
    r1 = r22;
    objc_msgSend(r0, r1);
    r0 = r24;
    [r0 release];
    r0 = *(r25 + 0x700);
    r8 = 0x100bdf000;
    d2 = *(r8 + 0xed0);
    r1 = r23;
    r0 = objc_msgSend(r0, r1);
    r0 = [r0 retain];
    r0 = r21;
    r1 = r22;
    objc_msgSend(r0, r1);
    r0 = r24;
    [r0 release];
    r0 = *(r25 + 0x700);
    r1 = r23;
    r0 = objc_msgSend(r0, r1);
    r0 = [r0 retain];
    r0 = r21;
    r1 = r22;
    objc_msgSend(r0, r1);
    r0 = r24;
    [r0 release];
    r0 = *(r25 + 0x700);
    r1 = r23;
    r0 = objc_msgSend(r0, r1);
    r0 = [r0 retain];
    r0 = r21;
    r1 = r22;
    objc_msgSend(r0, r1);
    r0 = r24;
    [r0 release];
    r0 = *(r25 + 0x700);
    r8 = 0x100bdf000;
    d11 = *(r8 + 0xee0);
    r1 = r23;
    r0 = objc_msgSend(r0, r1);
    r0 = [r0 retain];
    r0 = r21;
    r1 = r22;
    objc_msgSend(r0, r1);
    r0 = r24;
    [r0 release];
    r0 = *(r25 + 0x700);
    r8 = 0x100bdf000;
    d14 = *(r8 + 0xb90);
    r1 = r23;
    r0 = objc_msgSend(r0, r1);
    r0 = [r0 retain];
    r0 = r21;
    r1 = r22;
    objc_msgSend(r0, r1);
    r0 = r24;
    [r0 release];
    r0 = *(r25 + 0x700);
    r8 = 0x100bdf000;
    d2 = *(r8 + 0xbd8);
    r1 = r23;
    r0 = objc_msgSend(r0, r1);
    r0 = [r0 retain];
    r0 = r21;
    r1 = r22;
    objc_msgSend(r0, r1);
    r0 = r24;
    [r0 release];
    r0 = *(r25 + 0x700);
    r1 = r23;
    r0 = objc_msgSend(r0, r1);
    r0 = [r0 retain];
    r0 = r21;
    r1 = r22;
    objc_msgSend(r0, r1);
    r0 = r24;
    [r0 release];
    r0 = *(r25 + 0x700);
    r1 = r23;
    r0 = objc_msgSend(r0, r1);
    r0 = [r0 retain];
    r0 = r21;
    r1 = r22;
    objc_msgSend(r0, r1);
    r0 = r24;
    [r0 release];
    r0 = *(r25 + 0x700);
    r1 = r23;
    r0 = objc_msgSend(r0, r1);
    r0 = [r0 retain];
    r0 = r21;
    r1 = r22;
    objc_msgSend(r0, r1);
    r0 = r24;
    [r0 release];
    r0 = *(r25 + 0x700);
    r1 = r23;
    r0 = objc_msgSend(r0, r1);
    r0 = [r0 retain];
    r0 = r21;
    r1 = r22;
    objc_msgSend(r0, r1);
    r0 = r24;
    [r0 release];
    r0 = *(r25 + 0x700);
    r1 = r23;
    r0 = objc_msgSend(r0, r1);
    r0 = [r0 retain];
    r0 = r21;
    r1 = r22;
    objc_msgSend(r0, r1);
    r0 = r24;
    [r0 release];
    r0 = *(r25 + 0x700);
    r8 = 0x100bdf000;
    d2 = *(r8 + 0xf18);
    r1 = r23;
    r0 = objc_msgSend(r0, r1);
    r0 = [r0 retain];
    r0 = r21;
    r1 = r22;
    objc_msgSend(r0, r1);
    r0 = r24;
    [r0 release];
    r0 = *(r25 + 0x700);
    r1 = r23;
    r0 = objc_msgSend(r0, r1);
    r0 = [r0 retain];
    r0 = r21;
    r1 = r22;
    objc_msgSend(r0, r1);
    r0 = r24;
    [r0 release];
    r0 = *(r25 + 0x700);
    r1 = r23;
    r0 = objc_msgSend(r0, r1);
    r0 = [r0 retain];
    r0 = r21;
    r1 = r22;
    objc_msgSend(r0, r1);
    r0 = r24;
    [r0 release];
    r0 = *(r25 + 0x700);
    r8 = 0x100bdf000;
    d2 = *(r8 + 0xf20);
    r1 = r23;
    r0 = objc_msgSend(r0, r1);
    r0 = [r0 retain];
    r0 = r21;
    r1 = r22;
    objc_msgSend(r0, r1);
    r0 = r24;
    [r0 release];
    r0 = *(r25 + 0x700);
    r1 = r23;
    r0 = objc_msgSend(r0, r1);
    r0 = [r0 retain];
    r0 = r21;
    r1 = r22;
    objc_msgSend(r0, r1);
    r0 = r24;
    [r0 release];
    r0 = *(r25 + 0x700);
    r8 = 0x100bdf000;
    d2 = *(r8 + 0xf28);
    r1 = r23;
    r0 = objc_msgSend(r0, r1);
    r0 = [r0 retain];
    r0 = r21;
    r1 = r22;
    objc_msgSend(r0, r1);
    r0 = r24;
    [r0 release];
    r0 = *(r25 + 0x700);
    r1 = r23;
    r0 = objc_msgSend(r0, r1);
    r0 = [r0 retain];
    r0 = r21;
    r1 = r22;
    objc_msgSend(r0, r1);
    r0 = r24;
    [r0 release];
    r0 = *(r25 + 0x700);
    r8 = 0x100bdf000;
    d1 = *(r8 + 0xf38);
    r1 = r23;
    r0 = objc_msgSend(r0, r1);
    r0 = [r0 retain];
    r0 = r21;
    r1 = r22;
    objc_msgSend(r0, r1);
    r0 = r24;
    [r0 release];
    r0 = *(r25 + 0x700);
    r8 = 0x100bdf000;
    d0 = *(r8 + 0xf40);
    r1 = r23;
    r0 = objc_msgSend(r0, r1);
    r0 = [r0 retain];
    r0 = r21;
    r1 = r22;
    objc_msgSend(r0, r1);
    r0 = r24;
    [r0 release];
    r0 = *(r25 + 0x700);
    r8 = 0x100bdf000;
    d0 = *(r8 + 0xf48);
    r1 = r23;
    r0 = objc_msgSend(r0, r1);
    r0 = [r0 retain];
    r0 = r21;
    r1 = r22;
    objc_msgSend(r0, r1);
    r0 = r24;
    [r0 release];
    r0 = *(r25 + 0x700);
    r8 = 0x100bdf000;
    d11 = *(r8 + 0xf50);
    r8 = 0x100ba2000;
    d2 = *(r8 + 0xa40);
    r1 = r23;
    r0 = objc_msgSend(r0, r1);
    r0 = [r0 retain];
    r0 = r21;
    r1 = r22;
    objc_msgSend(r0, r1);
    r0 = r24;
    [r0 release];
    r0 = *(r25 + 0x700);
    r1 = r23;
    r0 = objc_msgSend(r0, r1);
    r0 = [r0 retain];
    r0 = r21;
    r1 = r22;
    objc_msgSend(r0, r1);
    r0 = r24;
    [r0 release];
    r0 = *(r25 + 0x700);
    r8 = 0x100bdf000;
    d2 = *(r8 + 0xf58);
    r1 = r23;
    r0 = objc_msgSend(r0, r1);
    r0 = [r0 retain];
    r0 = r21;
    r1 = r22;
    objc_msgSend(r0, r1);
    r0 = r24;
    [r0 release];
    r0 = *(r25 + 0x700);
    r1 = r23;
    r0 = objc_msgSend(r0, r1);
    r0 = [r0 retain];
    r0 = r21;
    r1 = r22;
    objc_msgSend(r0, r1);
    r0 = r24;
    [r0 release];
    r0 = *(r25 + 0x700);
    r8 = 0x100bdf000;
    d0 = *(r8 + 0xf68);
    d2 = *(r8 + 0xf70);
    r1 = r23;
    r0 = objc_msgSend(r0, r1);
    r0 = [r0 retain];
    r0 = r21;
    r1 = r22;
    objc_msgSend(r0, r1);
    r0 = r24;
    [r0 release];
    r0 = *(r25 + 0x700);
    r1 = r23;
    r0 = objc_msgSend(r0, r1);
    r0 = [r0 retain];
    r0 = r21;
    r1 = r22;
    objc_msgSend(r0, r1);
    r0 = r24;
    [r0 release];
    r0 = *(r25 + 0x700);
    r1 = r23;
    r0 = objc_msgSend(r0, r1);
    r0 = [r0 retain];
    r0 = r21;
    r1 = r22;
    objc_msgSend(r0, r1);
    r0 = r24;
    [r0 release];
    r0 = *(r25 + 0x700);
    r8 = 0x100bdf000;
    d2 = *(r8 + 0xb58);
    r1 = r23;
    r0 = objc_msgSend(r0, r1);
    r0 = [r0 retain];
    r0 = r21;
    r1 = r22;
    objc_msgSend(r0, r1);
    r0 = r24;
    [r0 release];
    r0 = *(r25 + 0x700);
    r1 = r23;
    r0 = objc_msgSend(r0, r1);
    r0 = [r0 retain];
    r0 = r21;
    r1 = r22;
    objc_msgSend(r0, r1);
    r0 = r24;
    [r0 release];
    r0 = *(r25 + 0x700);
    r1 = r23;
    r0 = objc_msgSend(r0, r1);
    r0 = [r0 retain];
    r0 = r21;
    r1 = r22;
    objc_msgSend(r0, r1);
    r0 = r24;
    [r0 release];
    r0 = *(r25 + 0x700);
    r8 = 0x100bdf000;
    d2 = *(r8 + 0xb18);
    r1 = r23;
    r0 = objc_msgSend(r0, r1);
    r0 = [r0 retain];
    r0 = r21;
    r1 = r22;
    objc_msgSend(r0, r1);
    r0 = r24;
    [r0 release];
    r0 = *(r25 + 0x700);
    r8 = 0x100bdf000;
    d0 = *(r8 + 0xf88);
    r8 = 0x100b9b000;
    d2 = *(r8 + 0x5a0);
    r1 = r23;
    r0 = objc_msgSend(r0, r1);
    r0 = [r0 retain];
    r0 = r21;
    r1 = r22;
    objc_msgSend(r0, r1);
    r0 = r24;
    [r0 release];
    r0 = *(r25 + 0x700);
    r8 = 0x100bdf000;
    d2 = *(r8 + 0xf90);
    r1 = r23;
    r0 = objc_msgSend(r0, r1);
    r0 = [r0 retain];
    r0 = r21;
    r1 = r22;
    objc_msgSend(r0, r1);
    r0 = r24;
    [r0 release];
    r0 = *(r25 + 0x700);
    r8 = 0x100bdf000;
    d2 = *(r8 + 0xf98);
    r1 = r23;
    r0 = objc_msgSend(r0, r1);
    r0 = [r0 retain];
    r0 = r21;
    r1 = r22;
    objc_msgSend(r0, r1);
    r0 = r24;
    [r0 release];
    r0 = *(r25 + 0x700);
    r8 = 0x100bdf000;
    d2 = *(r8 + 0xfa0);
    r1 = r23;
    r0 = objc_msgSend(r0, r1);
    r0 = [r0 retain];
    r0 = r21;
    r1 = r22;
    objc_msgSend(r0, r1);
    r0 = r24;
    [r0 release];
    r0 = *(r25 + 0x700);
    r8 = 0x100bdf000;
    d2 = *(r8 + 0xfb0);
    r1 = r23;
    r0 = objc_msgSend(r0, r1);
    r0 = [r0 retain];
    r0 = r21;
    r1 = r22;
    objc_msgSend(r0, r1);
    r0 = r24;
    [r0 release];
    r0 = *(r25 + 0x700);
    r1 = r23;
    r0 = objc_msgSend(r0, r1);
    r0 = [r0 retain];
    r0 = r21;
    r1 = r22;
    objc_msgSend(r0, r1);
    r0 = r24;
    [r0 release];
    r0 = *(r25 + 0x700);
    r1 = r23;
    r0 = objc_msgSend(r0, r1);
    r0 = [r0 retain];
    r0 = r21;
    r1 = r22;
    objc_msgSend(r0, r1);
    r0 = r24;
    [r0 release];
    r0 = *(r25 + 0x700);
    r1 = r23;
    r0 = objc_msgSend(r0, r1);
    r0 = [r0 retain];
    r0 = r21;
    r1 = r22;
    objc_msgSend(r0, r1);
    r0 = r24;
    [r0 release];
    r0 = *(r25 + 0x700);
    r8 = 0x100bdf000;
    d0 = *(r8 + 0xfc8);
    r1 = r23;
    r0 = objc_msgSend(r0, r1);
    r0 = [r0 retain];
    r0 = r21;
    r1 = r22;
    objc_msgSend(r0, r1);
    r0 = r24;
    [r0 release];
    r0 = *(r25 + 0x700);
    r1 = r23;
    r0 = objc_msgSend(r0, r1);
    r0 = [r0 retain];
    r0 = r21;
    r1 = r22;
    objc_msgSend(r0, r1);
    r0 = r24;
    [r0 release];
    r0 = *(r25 + 0x700);
    r8 = 0x100bdf000;
    d1 = *(r8 + 0xfd8);
    r1 = r23;
    r0 = objc_msgSend(r0, r1);
    r0 = [r0 retain];
    r0 = r21;
    r1 = r22;
    objc_msgSend(r0, r1);
    r0 = r24;
    [r0 release];
    r0 = *(r25 + 0x700);
    r8 = 0x100ba2000;
    d0 = *(r8 + 0xa80);
    r1 = r23;
    r0 = objc_msgSend(r0, r1);
    r0 = [r0 retain];
    r0 = r21;
    r1 = r22;
    objc_msgSend(r0, r1);
    r0 = r24;
    [r0 release];
    r0 = *(r25 + 0x700);
    r1 = r23;
    r0 = objc_msgSend(r0, r1);
    r0 = [r0 retain];
    r0 = r21;
    r1 = r22;
    objc_msgSend(r0, r1);
    r0 = r24;
    [r0 release];
    r0 = *(r25 + 0x700);
    r1 = r23;
    r0 = objc_msgSend(r0, r1);
    r0 = [r0 retain];
    r0 = r21;
    r1 = r22;
    objc_msgSend(r0, r1);
    r0 = r24;
    [r0 release];
    r0 = *(r25 + 0x700);
    r8 = 0x100bdf000;
    d14 = *(r8 + 0xb60);
    r1 = r23;
    r0 = objc_msgSend(r0, r1);
    r0 = [r0 retain];
    r0 = r21;
    r1 = r22;
    objc_msgSend(r0, r1);
    r0 = r24;
    [r0 release];
    r0 = *(r25 + 0x700);
    r1 = r23;
    r0 = objc_msgSend(r0, r1);
    r0 = [r0 retain];
    r0 = r21;
    r1 = r22;
    objc_msgSend(r0, r1);
    r0 = r24;
    [r0 release];
    r0 = *(r25 + 0x700);
    r1 = r23;
    r0 = objc_msgSend(r0, r1);
    r0 = [r0 retain];
    r0 = r21;
    r1 = r22;
    objc_msgSend(r0, r1);
    r0 = r24;
    [r0 release];
    r0 = *(r25 + 0x700);
    r1 = r23;
    r0 = objc_msgSend(r0, r1);
    r0 = [r0 retain];
    r0 = r21;
    r1 = r22;
    objc_msgSend(r0, r1);
    r0 = r24;
    [r0 release];
    r0 = *(r25 + 0x700);
    r1 = r23;
    r0 = objc_msgSend(r0, r1);
    r0 = [r0 retain];
    r0 = r21;
    r1 = r22;
    objc_msgSend(r0, r1);
    r0 = r24;
    [r0 release];
    r0 = *(r25 + 0x700);
    r1 = r23;
    r0 = objc_msgSend(r0, r1);
    r0 = [r0 retain];
    r0 = r21;
    r1 = r22;
    objc_msgSend(r0, r1);
    r0 = r24;
    [r0 release];
    r0 = *(r25 + 0x700);
    r1 = r23;
    r0 = objc_msgSend(r0, r1);
    r0 = [r0 retain];
    r0 = r21;
    r1 = r22;
    objc_msgSend(r0, r1);
    r0 = r24;
    [r0 release];
    r0 = *(r25 + 0x700);
    r8 = 0x100bdf000;
    d2 = *(r8 + 0xbc0);
    r1 = r23;
    r0 = objc_msgSend(r0, r1);
    r0 = [r0 retain];
    r0 = r21;
    r1 = r22;
    objc_msgSend(r0, r1);
    r0 = r24;
    [r0 release];
    r0 = *(r25 + 0x700);
    r1 = r23;
    r0 = objc_msgSend(r0, r1);
    r0 = [r0 retain];
    r0 = r21;
    r1 = r22;
    objc_msgSend(r0, r1);
    r0 = r24;
    [r0 release];
    r0 = *(r25 + 0x700);
    r1 = r23;
    r0 = objc_msgSend(r0, r1);
    r0 = [r0 retain];
    r0 = r21;
    r1 = r22;
    objc_msgSend(r0, r1);
    r0 = r24;
    [r0 release];
    r0 = *(r25 + 0x700);
    r8 = 0x100bdf000;
    r1 = r23;
    r0 = objc_msgSend(r0, r1);
    r0 = [r0 retain];
    r0 = r21;
    r1 = r22;
    objc_msgSend(r0, r1);
    r0 = r24;
    [r0 release];
    r0 = *(r25 + 0x700);
    r1 = r23;
    r0 = objc_msgSend(r0, r1);
    r0 = [r0 retain];
    r0 = r21;
    r1 = r22;
    objc_msgSend(r0, r1);
    r0 = r24;
    [r0 release];
    r0 = *(r25 + 0x700);
    r1 = r23;
    r0 = objc_msgSend(r0, r1);
    r0 = [r0 retain];
    r0 = r21;
    r1 = r22;
    objc_msgSend(r0, r1);
    r0 = r24;
    [r0 release];
    r0 = *(r25 + 0x700);
    r8 = 0x100be0000;
    d2 = *r8;
    r1 = r23;
    r0 = objc_msgSend(r0, r1);
    r0 = [r0 retain];
    r0 = r21;
    r1 = r22;
    objc_msgSend(r0, r1);
    r0 = r24;
    [r0 release];
    r0 = *(r25 + 0x700);
    r1 = r23;
    r0 = objc_msgSend(r0, r1);
    r0 = [r0 retain];
    r0 = r21;
    r1 = r22;
    objc_msgSend(r0, r1);
    r0 = r24;
    [r0 release];
    r0 = *(r25 + 0x700);
    r8 = 0x100be0000;
    d0 = *(r8 + 0x8);
    r1 = r23;
    r0 = objc_msgSend(r0, r1);
    r0 = [r0 retain];
    r0 = r21;
    r1 = r22;
    objc_msgSend(r0, r1);
    r0 = r24;
    [r0 release];
    r0 = *(r25 + 0x700);
    r8 = 0x100be0000;
    d0 = *(r8 + 0x10);
    r1 = r23;
    r0 = objc_msgSend(r0, r1);
    r0 = [r0 retain];
    r0 = r21;
    r1 = r22;
    objc_msgSend(r0, r1);
    r0 = r24;
    [r0 release];
    r0 = *(r25 + 0x700);
    r1 = r23;
    r0 = objc_msgSend(r0, r1);
    r0 = [r0 retain];
    r0 = r21;
    r1 = r22;
    objc_msgSend(r0, r1);
    r0 = r24;
    [r0 release];
    r0 = *(r25 + 0x700);
    r8 = 0x100be0000;
    d2 = *(r8 + 0x20);
    r1 = r23;
    r0 = objc_msgSend(r0, r1);
    r0 = [r0 retain];
    r0 = r21;
    r1 = r22;
    objc_msgSend(r0, r1);
    r0 = r24;
    [r0 release];
    r0 = *(r25 + 0x700);
    r1 = r23;
    r0 = objc_msgSend(r0, r1);
    r0 = [r0 retain];
    r0 = r21;
    r1 = r22;
    objc_msgSend(r0, r1);
    r0 = r24;
    [r0 release];
    r0 = *(r25 + 0x700);
    r8 = 0x100be0000;
    d1 = *(r8 + 0x28);
    r1 = r23;
    r0 = objc_msgSend(r0, r1);
    r0 = [r0 retain];
    r0 = r21;
    r1 = r22;
    objc_msgSend(r0, r1);
    r0 = r24;
    [r0 release];
    r0 = *(r25 + 0x700);
    r1 = r23;
    r0 = objc_msgSend(r0, r1);
    r0 = [r0 retain];
    r0 = r21;
    r1 = r22;
    objc_msgSend(r0, r1);
    r0 = r24;
    [r0 release];
    r0 = *(r25 + 0x700);
    r8 = 0x100be0000;
    d2 = *(r8 + 0x38);
    r1 = r23;
    r0 = objc_msgSend(r0, r1);
    r0 = [r0 retain];
    r0 = r21;
    r1 = r22;
    objc_msgSend(r0, r1);
    r0 = r24;
    [r0 release];
    r0 = *(r25 + 0x700);
    r1 = r23;
    r0 = objc_msgSend(r0, r1);
    r0 = [r0 retain];
    r0 = r21;
    r1 = r22;
    objc_msgSend(r0, r1);
    r0 = r24;
    [r0 release];
    r0 = *(r25 + 0x700);
    r8 = 0x100be0000;
    d11 = *(r8 + 0x40);
    r1 = r23;
    r0 = objc_msgSend(r0, r1);
    r0 = [r0 retain];
    r0 = r21;
    r1 = r22;
    objc_msgSend(r0, r1);
    r0 = r24;
    [r0 release];
    r0 = *(r25 + 0x700);
    r1 = r23;
    r0 = objc_msgSend(r0, r1);
    r0 = [r0 retain];
    r0 = r21;
    r1 = r22;
    objc_msgSend(r0, r1);
    r0 = r24;
    [r0 release];
    r0 = *(r25 + 0x700);
    r1 = r23;
    r0 = objc_msgSend(r0, r1);
    r0 = [r0 retain];
    r0 = r21;
    r1 = r22;
    objc_msgSend(r0, r1);
    r0 = r24;
    [r0 release];
    r0 = *(r25 + 0x700);
    r1 = r23;
    r0 = objc_msgSend(r0, r1);
    r0 = [r0 retain];
    r0 = r21;
    r1 = r22;
    objc_msgSend(r0, r1);
    r0 = r24;
    [r0 release];
    r0 = *(r25 + 0x700);
    r1 = r23;
    r0 = objc_msgSend(r0, r1);
    r0 = [r0 retain];
    r0 = r21;
    r1 = r22;
    objc_msgSend(r0, r1);
    r0 = r24;
    [r0 release];
    r0 = *(r25 + 0x700);
    r1 = r23;
    r0 = objc_msgSend(r0, r1);
    r0 = [r0 retain];
    r0 = r21;
    r1 = r22;
    objc_msgSend(r0, r1);
    r0 = r24;
    [r0 release];
    r0 = *(r25 + 0x700);
    r1 = r23;
    r0 = objc_msgSend(r0, r1);
    r0 = [r0 retain];
    r0 = r21;
    r1 = r22;
    objc_msgSend(r0, r1);
    r0 = r24;
    [r0 release];
    r0 = *(r25 + 0x700);
    r8 = 0x100be0000;
    d0 = *(r8 + 0x68);
    r1 = r23;
    r0 = objc_msgSend(r0, r1);
    r0 = [r0 retain];
    r0 = r21;
    r1 = r22;
    objc_msgSend(r0, r1);
    r0 = r24;
    [r0 release];
    r0 = *(r25 + 0x700);
    r1 = r23;
    r0 = objc_msgSend(r0, r1);
    r0 = [r0 retain];
    r0 = r21;
    r1 = r22;
    objc_msgSend(r0, r1);
    r0 = r24;
    [r0 release];
    r0 = *(r25 + 0x700);
    r1 = r23;
    r0 = objc_msgSend(r0, r1);
    r0 = [r0 retain];
    r0 = r21;
    r1 = r22;
    objc_msgSend(r0, r1);
    r0 = r24;
    [r0 release];
    r0 = *(r25 + 0x700);
    r1 = r23;
    r0 = objc_msgSend(r0, r1);
    r0 = [r0 retain];
    r0 = r21;
    r1 = r22;
    objc_msgSend(r0, r1);
    r0 = r24;
    [r0 release];
    r0 = *(r25 + 0x700);
    r8 = 0x100be0000;
    d10 = *(r8 + 0x70);
    r1 = r23;
    r0 = objc_msgSend(r0, r1);
    r0 = [r0 retain];
    r0 = r21;
    r1 = r22;
    objc_msgSend(r0, r1);
    r0 = r24;
    [r0 release];
    r0 = *(r25 + 0x700);
    r1 = r23;
    r0 = objc_msgSend(r0, r1);
    r0 = [r0 retain];
    r0 = r21;
    r1 = r22;
    objc_msgSend(r0, r1);
    r0 = r24;
    [r0 release];
    r0 = *(r25 + 0x700);
    r1 = r23;
    r0 = objc_msgSend(r0, r1);
    r0 = [r0 retain];
    r0 = r21;
    r1 = r22;
    objc_msgSend(r0, r1);
    r0 = r24;
    [r0 release];
    r0 = *(r25 + 0x700);
    r1 = r23;
    r0 = objc_msgSend(r0, r1);
    r0 = [r0 retain];
    r0 = r21;
    r1 = r22;
    objc_msgSend(r0, r1);
    r0 = r24;
    [r0 release];
    r0 = *(r25 + 0x700);
    r1 = r23;
    r0 = objc_msgSend(r0, r1);
    r0 = [r0 retain];
    r0 = r21;
    r1 = r22;
    objc_msgSend(r0, r1);
    r0 = r24;
    [r0 release];
    r0 = *(r25 + 0x700);
    r1 = r23;
    r0 = objc_msgSend(r0, r1);
    r0 = [r0 retain];
    r0 = r21;
    r1 = r22;
    objc_msgSend(r0, r1);
    r0 = r24;
    [r0 release];
    r0 = *(r25 + 0x700);
    r1 = r23;
    r0 = objc_msgSend(r0, r1);
    r0 = [r0 retain];
    r0 = r21;
    r1 = r22;
    objc_msgSend(r0, r1);
    r0 = r24;
    [r0 release];
    r0 = *(r25 + 0x700);
    r1 = r23;
    r0 = objc_msgSend(r0, r1);
    r0 = [r0 retain];
    r0 = r21;
    r1 = r22;
    objc_msgSend(r0, r1);
    r0 = r24;
    [r0 release];
    r0 = *(r25 + 0x700);
    r1 = r23;
    r0 = objc_msgSend(r0, r1);
    r0 = [r0 retain];
    r0 = r21;
    r1 = r22;
    objc_msgSend(r0, r1);
    r0 = r24;
    [r0 release];
    r0 = *(r25 + 0x700);
    r1 = r23;
    r0 = objc_msgSend(r0, r1);
    r0 = [r0 retain];
    r0 = r21;
    r1 = r22;
    objc_msgSend(r0, r1);
    r0 = r24;
    [r0 release];
    r0 = *(r25 + 0x700);
    r1 = r23;
    r0 = objc_msgSend(r0, r1);
    r0 = [r0 retain];
    r0 = r21;
    r1 = r22;
    objc_msgSend(r0, r1);
    r0 = r24;
    [r0 release];
    r0 = *(r25 + 0x700);
    r1 = r23;
    r0 = objc_msgSend(r0, r1);
    r0 = [r0 retain];
    r0 = r21;
    r1 = r22;
    objc_msgSend(r0, r1);
    r0 = r24;
    [r0 release];
    r0 = *(r25 + 0x700);
    r1 = r23;
    r0 = objc_msgSend(r0, r1);
    r0 = [r0 retain];
    r0 = r21;
    r1 = r22;
    objc_msgSend(r0, r1);
    r0 = r24;
    [r0 release];
    r0 = *(r25 + 0x700);
    r1 = r23;
    r0 = objc_msgSend(r0, r1);
    r0 = [r0 retain];
    r0 = r21;
    r1 = r22;
    objc_msgSend(r0, r1);
    r0 = r24;
    [r0 release];
    r0 = *(r25 + 0x700);
    r1 = r23;
    r0 = objc_msgSend(r0, r1);
    r0 = [r0 retain];
    r0 = r21;
    r1 = r22;
    objc_msgSend(r0, r1);
    r0 = r24;
    [r0 release];
    r0 = *(r25 + 0x700);
    r1 = r23;
    r0 = objc_msgSend(r0, r1);
    r0 = [r0 retain];
    r0 = r21;
    r1 = r22;
    objc_msgSend(r0, r1);
    r0 = r24;
    [r0 release];
    r0 = *(r25 + 0x700);
    r1 = r23;
    r0 = objc_msgSend(r0, r1);
    r0 = [r0 retain];
    r0 = r21;
    r1 = r22;
    objc_msgSend(r0, r1);
    r0 = r24;
    [r0 release];
    r0 = *(r25 + 0x700);
    r1 = r23;
    r0 = objc_msgSend(r0, r1);
    r0 = [r0 retain];
    r0 = r21;
    r1 = r22;
    objc_msgSend(r0, r1);
    r0 = r24;
    [r0 release];
    r0 = *(r25 + 0x700);
    r1 = r23;
    r0 = objc_msgSend(r0, r1);
    r0 = [r0 retain];
    r0 = r21;
    r1 = r22;
    objc_msgSend(r0, r1);
    r0 = r24;
    [r0 release];
    r0 = *(r25 + 0x700);
    r1 = r23;
    r0 = objc_msgSend(r0, r1);
    r0 = [r0 retain];
    r0 = r21;
    r1 = r22;
    objc_msgSend(r0, r1);
    r0 = r24;
    [r0 release];
    r0 = *(r25 + 0x700);
    r1 = r23;
    r0 = objc_msgSend(r0, r1);
    r0 = [r0 retain];
    r0 = r21;
    r1 = r22;
    objc_msgSend(r0, r1);
    r0 = r24;
    [r0 release];
    r0 = *(r25 + 0x700);
    r1 = r23;
    r0 = objc_msgSend(r0, r1);
    r0 = [r0 retain];
    r0 = r21;
    r1 = r22;
    objc_msgSend(r0, r1);
    r0 = r24;
    [r0 release];
    r0 = *(r25 + 0x700);
    r1 = r23;
    r0 = objc_msgSend(r0, r1);
    r0 = [r0 retain];
    r0 = r21;
    r1 = r22;
    objc_msgSend(r0, r1);
    r0 = r24;
    [r0 release];
    r0 = *(r25 + 0x700);
    r1 = r23;
    r0 = objc_msgSend(r0, r1);
    r0 = [r0 retain];
    r0 = r21;
    r1 = r22;
    objc_msgSend(r0, r1);
    r0 = r24;
    [r0 release];
    r0 = *(r25 + 0x700);
    r8 = 0x100be0000;
    d9 = *(r8 + 0x88);
    r1 = r23;
    r0 = objc_msgSend(r0, r1);
    r0 = [r0 retain];
    r0 = r21;
    r1 = r22;
    objc_msgSend(r0, r1);
    r0 = r24;
    [r0 release];
    r0 = *(r25 + 0x700);
    r1 = r23;
    r0 = objc_msgSend(r0, r1);
    r0 = [r0 retain];
    r0 = r21;
    r1 = r22;
    objc_msgSend(r0, r1);
    r0 = r24;
    [r0 release];
    r0 = *(r25 + 0x700);
    r8 = 0x100be0000;
    d2 = *(r8 + 0xa8);
    r1 = r23;
    r0 = objc_msgSend(r0, r1);
    r0 = [r0 retain];
    r0 = r21;
    r1 = r22;
    objc_msgSend(r0, r1);
    r0 = r24;
    [r0 release];
    r0 = *(r25 + 0x700);
    r1 = r23;
    r0 = objc_msgSend(r0, r1);
    r0 = [r0 retain];
    r0 = r21;
    r1 = r22;
    objc_msgSend(r0, r1);
    r0 = r24;
    [r0 release];
    r0 = *(r25 + 0x700);
    r1 = r23;
    r0 = objc_msgSend(r0, r1);
    r0 = [r0 retain];
    r0 = r21;
    r1 = r22;
    objc_msgSend(r0, r1);
    r0 = r24;
    [r0 release];
    r0 = *(r25 + 0x700);
    r1 = r23;
    r0 = objc_msgSend(r0, r1);
    r0 = [r0 retain];
    r0 = r21;
    r1 = r22;
    objc_msgSend(r0, r1);
    r0 = r24;
    [r0 release];
    r0 = *(r25 + 0x700);
    r1 = r23;
    r0 = objc_msgSend(r0, r1);
    r0 = [r0 retain];
    r0 = r21;
    r1 = r22;
    objc_msgSend(r0, r1);
    r0 = r24;
    [r0 release];
    r0 = *(r25 + 0x700);
    r1 = r23;
    r0 = objc_msgSend(r0, r1);
    r0 = [r0 retain];
    r0 = r21;
    r1 = r22;
    objc_msgSend(r0, r1);
    r0 = r24;
    [r0 release];
    r0 = *(r25 + 0x700);
    r1 = r23;
    r0 = objc_msgSend(r0, r1);
    r0 = [r0 retain];
    r0 = r21;
    r1 = r22;
    objc_msgSend(r0, r1);
    r0 = r24;
    [r0 release];
    r0 = *(r25 + 0x700);
    r1 = r23;
    r0 = objc_msgSend(r0, r1);
    r0 = [r0 retain];
    r0 = r21;
    r1 = r22;
    objc_msgSend(r0, r1);
    r0 = r24;
    [r0 release];
    r0 = *(r25 + 0x700);
    r1 = r23;
    r0 = objc_msgSend(r0, r1);
    r0 = [r0 retain];
    r0 = r21;
    r1 = r22;
    objc_msgSend(r0, r1);
    r0 = r24;
    [r0 release];
    r0 = *(r25 + 0x700);
    r1 = r23;
    r0 = objc_msgSend(r0, r1);
    r0 = [r0 retain];
    r0 = r21;
    r1 = r22;
    objc_msgSend(r0, r1);
    r0 = r24;
    [r0 release];
    r0 = *(r25 + 0x700);
    r1 = r23;
    r0 = objc_msgSend(r0, r1);
    r0 = [r0 retain];
    r0 = r21;
    r1 = r22;
    objc_msgSend(r0, r1);
    r0 = r24;
    [r0 release];
    r0 = *(r25 + 0x700);
    r1 = r23;
    r0 = objc_msgSend(r0, r1);
    r0 = [r0 retain];
    r0 = r21;
    r1 = r22;
    objc_msgSend(r0, r1);
    r0 = r24;
    [r0 release];
    r0 = *(r25 + 0x700);
    r1 = r23;
    r0 = objc_msgSend(r0, r1);
    r0 = [r0 retain];
    r0 = r21;
    r1 = r22;
    objc_msgSend(r0, r1);
    r0 = r24;
    [r0 release];
    r0 = *(r25 + 0x700);
    r1 = r23;
    r0 = objc_msgSend(r0, r1);
    r0 = [r0 retain];
    r0 = r21;
    r1 = r22;
    objc_msgSend(r0, r1);
    r0 = r24;
    [r0 release];
    r0 = *(r25 + 0x700);
    r1 = r23;
    r0 = objc_msgSend(r0, r1);
    r0 = [r0 retain];
    r0 = r21;
    r1 = r22;
    objc_msgSend(r0, r1);
    r0 = r24;
    [r0 release];
    r0 = *(r25 + 0x700);
    r1 = r23;
    r0 = objc_msgSend(r0, r1);
    r0 = [r0 retain];
    r0 = r21;
    r1 = r22;
    objc_msgSend(r0, r1);
    r0 = r24;
    [r0 release];
    r0 = *(r25 + 0x700);
    r1 = r23;
    r0 = objc_msgSend(r0, r1);
    r0 = [r0 retain];
    r0 = r21;
    r1 = r22;
    objc_msgSend(r0, r1);
    r0 = r24;
    [r0 release];
    r0 = *(r25 + 0x700);
    r1 = r23;
    r0 = objc_msgSend(r0, r1);
    r0 = [r0 retain];
    r0 = r21;
    r1 = r22;
    objc_msgSend(r0, r1);
    r0 = r24;
    [r0 release];
    r0 = *(r25 + 0x700);
    r1 = r23;
    r0 = objc_msgSend(r0, r1);
    r0 = [r0 retain];
    r0 = r21;
    r1 = r22;
    objc_msgSend(r0, r1);
    r0 = r24;
    [r0 release];
    r0 = *(r25 + 0x700);
    r1 = r23;
    r0 = objc_msgSend(r0, r1);
    r0 = [r0 retain];
    r0 = r21;
    r1 = r22;
    objc_msgSend(r0, r1);
    r0 = r24;
    [r0 release];
    r0 = *(r25 + 0x700);
    r1 = r23;
    r0 = objc_msgSend(r0, r1);
    r0 = [r0 retain];
    r0 = r21;
    r1 = r22;
    objc_msgSend(r0, r1);
    r0 = r24;
    [r0 release];
    r0 = *(r25 + 0x700);
    r1 = r23;
    r0 = objc_msgSend(r0, r1);
    r0 = [r0 retain];
    r0 = r21;
    r1 = r22;
    objc_msgSend(r0, r1);
    r0 = r24;
    [r0 release];
    r0 = *(r25 + 0x700);
    r1 = r23;
    r0 = objc_msgSend(r0, r1);
    r0 = [r0 retain];
    r0 = r21;
    r1 = r22;
    objc_msgSend(r0, r1);
    r0 = r24;
    [r0 release];
    r0 = *(r25 + 0x700);
    r1 = r23;
    r0 = objc_msgSend(r0, r1);
    r0 = [r0 retain];
    r0 = r21;
    r1 = r22;
    objc_msgSend(r0, r1);
    r0 = r24;
    [r0 release];
    r0 = *(r25 + 0x700);
    r1 = r23;
    r0 = objc_msgSend(r0, r1);
    r0 = [r0 retain];
    r0 = r21;
    r1 = r22;
    objc_msgSend(r0, r1);
    r0 = r24;
    [r0 release];
    r0 = *(r25 + 0x700);
    r1 = r23;
    r0 = objc_msgSend(r0, r1);
    r0 = [r0 retain];
    r0 = r21;
    r1 = r22;
    objc_msgSend(r0, r1);
    r0 = r24;
    [r0 release];
    r0 = *(r25 + 0x700);
    r1 = r23;
    r0 = objc_msgSend(r0, r1);
    r0 = [r0 retain];
    r0 = r21;
    r1 = r22;
    objc_msgSend(r0, r1);
    r0 = r24;
    [r0 release];
    r0 = *(r25 + 0x700);
    r1 = r23;
    r0 = objc_msgSend(r0, r1);
    r0 = [r0 retain];
    r0 = r21;
    r1 = r22;
    objc_msgSend(r0, r1);
    r0 = r24;
    [r0 release];
    r0 = *(r25 + 0x700);
    r1 = r23;
    r0 = objc_msgSend(r0, r1);
    r0 = [r0 retain];
    r0 = r21;
    r1 = r22;
    objc_msgSend(r0, r1);
    r0 = r24;
    [r0 release];
    r0 = *(r25 + 0x700);
    r1 = r23;
    r0 = objc_msgSend(r0, r1);
    r0 = [r0 retain];
    r0 = r21;
    r1 = r22;
    objc_msgSend(r0, r1);
    r0 = r24;
    [r0 release];
    r0 = *(r25 + 0x700);
    r1 = r23;
    r0 = objc_msgSend(r0, r1);
    r0 = [r0 retain];
    r0 = r21;
    r1 = r22;
    objc_msgSend(r0, r1);
    r0 = r24;
    [r0 release];
    r0 = *(r25 + 0x700);
    r1 = r23;
    r0 = objc_msgSend(r0, r1);
    r0 = [r0 retain];
    r0 = r21;
    r1 = r22;
    objc_msgSend(r0, r1);
    r0 = r24;
    [r0 release];
    r0 = *(r25 + 0x700);
    r1 = r23;
    r0 = objc_msgSend(r0, r1);
    r0 = [r0 retain];
    r0 = r21;
    r1 = r22;
    objc_msgSend(r0, r1);
    r0 = r24;
    [r0 release];
    r0 = *(r25 + 0x700);
    r1 = r23;
    r0 = objc_msgSend(r0, r1);
    r0 = [r0 retain];
    r0 = r21;
    r1 = r22;
    objc_msgSend(r0, r1);
    r0 = r24;
    [r0 release];
    r0 = *(r25 + 0x700);
    r1 = r23;
    r0 = objc_msgSend(r0, r1);
    r0 = [r0 retain];
    r0 = r21;
    r1 = r22;
    objc_msgSend(r0, r1);
    r0 = r24;
    [r0 release];
    r0 = *(r25 + 0x700);
    r1 = r23;
    r0 = objc_msgSend(r0, r1);
    r0 = [r0 retain];
    r0 = r21;
    r1 = r22;
    objc_msgSend(r0, r1);
    r0 = r24;
    [r0 release];
    r0 = *(r25 + 0x700);
    r1 = r23;
    r0 = objc_msgSend(r0, r1);
    r0 = [r0 retain];
    r0 = r21;
    r1 = r22;
    objc_msgSend(r0, r1);
    r0 = r24;
    [r0 release];
    r0 = *(r25 + 0x700);
    r1 = r23;
    r0 = objc_msgSend(r0, r1);
    r0 = [r0 retain];
    r0 = r21;
    r1 = r22;
    objc_msgSend(r0, r1);
    r0 = r24;
    [r0 release];
    r0 = *(r25 + 0x700);
    r1 = r23;
    r0 = objc_msgSend(r0, r1);
    r0 = [r0 retain];
    r0 = r21;
    r1 = r22;
    objc_msgSend(r0, r1);
    r0 = r24;
    [r0 release];
    r0 = *(r25 + 0x700);
    r1 = r23;
    r0 = objc_msgSend(r0, r1);
    r0 = [r0 retain];
    r0 = r21;
    r1 = r22;
    objc_msgSend(r0, r1);
    r0 = r24;
    [r0 release];
    r0 = *(r25 + 0x700);
    r1 = r23;
    r0 = objc_msgSend(r0, r1);
    r0 = [r0 retain];
    r0 = r21;
    r1 = r22;
    objc_msgSend(r0, r1);
    r0 = r24;
    [r0 release];
    r0 = *(r25 + 0x700);
    r1 = r23;
    r0 = objc_msgSend(r0, r1);
    r0 = [r0 retain];
    r0 = r21;
    r1 = r22;
    objc_msgSend(r0, r1);
    r0 = r24;
    [r0 release];
    r0 = *(r25 + 0x700);
    r1 = r23;
    r0 = objc_msgSend(r0, r1);
    r0 = [r0 retain];
    r0 = r21;
    r1 = r22;
    objc_msgSend(r0, r1);
    r0 = r24;
    [r0 release];
    r0 = *(r25 + 0x700);
    r1 = r23;
    r0 = objc_msgSend(r0, r1);
    r0 = [r0 retain];
    r0 = r21;
    r1 = r22;
    objc_msgSend(r0, r1);
    r0 = r24;
    [r0 release];
    r0 = *(r25 + 0x700);
    r1 = r23;
    r0 = objc_msgSend(r0, r1);
    r0 = [r0 retain];
    r0 = r21;
    r1 = r22;
    objc_msgSend(r0, r1);
    r0 = r24;
    [r0 release];
    r0 = *(r25 + 0x700);
    r1 = r23;
    r0 = objc_msgSend(r0, r1);
    r0 = [r0 retain];
    r0 = r21;
    r1 = r22;
    objc_msgSend(r0, r1);
    r0 = r24;
    [r0 release];
    r0 = *(r25 + 0x700);
    r1 = r23;
    r0 = objc_msgSend(r0, r1);
    r0 = [r0 retain];
    r0 = r21;
    r1 = r22;
    objc_msgSend(r0, r1);
    r0 = r24;
    [r0 release];
    r0 = *(r25 + 0x700);
    r1 = r23;
    r0 = objc_msgSend(r0, r1);
    r0 = [r0 retain];
    r0 = r21;
    r1 = r22;
    objc_msgSend(r0, r1);
    r0 = r24;
    [r0 release];
    r0 = *(r25 + 0x700);
    r1 = r23;
    r0 = objc_msgSend(r0, r1);
    r0 = [r0 retain];
    r0 = r21;
    r1 = r22;
    objc_msgSend(r0, r1);
    r0 = r24;
    [r0 release];
    r0 = *(r25 + 0x700);
    r1 = r23;
    r0 = objc_msgSend(r0, r1);
    r0 = [r0 retain];
    r0 = r21;
    r1 = r22;
    objc_msgSend(r0, r1);
    r0 = r24;
    [r0 release];
    r0 = *(r25 + 0x700);
    r1 = r23;
    r0 = objc_msgSend(r0, r1);
    r0 = [r0 retain];
    r0 = r21;
    r1 = r22;
    objc_msgSend(r0, r1);
    r0 = r24;
    [r0 release];
    r0 = *(r25 + 0x700);
    r1 = r23;
    r0 = objc_msgSend(r0, r1);
    r0 = [r0 retain];
    r0 = r21;
    r1 = r22;
    objc_msgSend(r0, r1);
    r0 = r24;
    [r0 release];
    r0 = *(r25 + 0x700);
    r1 = r23;
    r0 = objc_msgSend(r0, r1);
    r0 = [r0 retain];
    r0 = r21;
    r1 = r22;
    objc_msgSend(r0, r1);
    r0 = r24;
    [r0 release];
    r0 = *(r25 + 0x700);
    r1 = r23;
    r0 = objc_msgSend(r0, r1);
    r0 = [r0 retain];
    r0 = r21;
    r1 = r22;
    objc_msgSend(r0, r1);
    r0 = r24;
    [r0 release];
    r0 = *(r25 + 0x700);
    r1 = r23;
    r0 = objc_msgSend(r0, r1);
    r0 = [r0 retain];
    r0 = r21;
    r1 = r22;
    objc_msgSend(r0, r1);
    r0 = r24;
    [r0 release];
    r0 = *(r25 + 0x700);
    r1 = r23;
    r0 = objc_msgSend(r0, r1);
    r0 = [r0 retain];
    r0 = r21;
    r1 = r22;
    objc_msgSend(r0, r1);
    r0 = r24;
    [r0 release];
    r0 = *(r25 + 0x700);
    r1 = r23;
    r0 = objc_msgSend(r0, r1);
    r0 = [r0 retain];
    r0 = r21;
    r1 = r22;
    objc_msgSend(r0, r1);
    r0 = r24;
    [r0 release];
    r0 = *(r25 + 0x700);
    r1 = r23;
    r0 = objc_msgSend(r0, r1);
    r0 = [r0 retain];
    r0 = r21;
    r1 = r22;
    objc_msgSend(r0, r1);
    r0 = r24;
    [r0 release];
    r0 = *(r25 + 0x700);
    r1 = r23;
    r0 = objc_msgSend(r0, r1);
    r0 = [r0 retain];
    r0 = r21;
    r1 = r22;
    objc_msgSend(r0, r1);
    r0 = r24;
    [r0 release];
    r0 = *(r25 + 0x700);
    r1 = r23;
    r0 = objc_msgSend(r0, r1);
    r0 = [r0 retain];
    r0 = r21;
    r1 = r22;
    objc_msgSend(r0, r1);
    r0 = r24;
    [r0 release];
    r0 = *(r25 + 0x700);
    r1 = r23;
    r0 = objc_msgSend(r0, r1);
    r0 = [r0 retain];
    r0 = r21;
    r1 = r22;
    objc_msgSend(r0, r1);
    r0 = r24;
    [r0 release];
    r0 = *(r25 + 0x700);
    r1 = r23;
    r0 = objc_msgSend(r0, r1);
    r29 = r29;
    r0 = [r0 retain];
    r0 = r21;
    r1 = r22;
    objc_msgSend(r0, r1);
    r0 = r23;
    [r0 release];
    r8 = 0x101137000;
    r23 = *(r8 + 0x1e8);
    r28 = 0x10;
    do {
            [objc_msgSend(@class(NSString), r23) retain];
            objc_msgSend(r19, r22);
            [r26 release];
            r0 = @class(NSString);
            r0 = objc_msgSend(r0, r23);
            r29 = r29;
            [r0 retain];
            objc_msgSend(r20, r22);
            [r26 release];
            r28 = r28 + 0x1;
    } while (r28 != 0x100);
    r0 = [r19 copy];
    r8 = *0x1011d6de0;
    *0x1011d6de0 = r0;
    [r8 release];
    r0 = [r20 copy];
    r8 = *0x1011d6de8;
    *0x1011d6de8 = r0;
    [r8 release];
    r0 = [r21 copy];
    r8 = *0x1011d6df0;
    *0x1011d6df0 = r0;
    [r8 release];
    [r21 release];
    [r20 release];
    [r19 release];
    return;
}

-(void)clearColorsForAllFlags {
    r31 = r31 - 0xa0;
    var_30 = d9;
    stack[-56] = d8;
    var_20 = r22;
    stack[-40] = r21;
    var_10 = r20;
    stack[-24] = r19;
    saved_fp = r29;
    stack[-8] = r30;
    r29 = &saved_fp;
    r20 = self;
    r0 = objc_retainBlock(&var_58);
    r19 = r0;
    if ([r20 isOnInternalLoggerQueue] != 0x0) {
            (*(r19 + 0x10))(r19);
    }
    else {
            r21 = [[TR_DDLog loggingQueue] retain];
            var_60 = [r19 retain];
            dispatch_async(r21, &var_88);
            [var_60 release];
            [r21 release];
    }
    [r19 release];
    return;
}

-(void)clearColorsForAllTags {
    r31 = r31 - 0xa0;
    var_30 = d9;
    stack[-56] = d8;
    var_20 = r22;
    stack[-40] = r21;
    var_10 = r20;
    stack[-24] = r19;
    saved_fp = r29;
    stack[-8] = r30;
    r29 = &saved_fp;
    r20 = self;
    r0 = objc_retainBlock(&var_58);
    r19 = r0;
    if ([r20 isOnInternalLoggerQueue] != 0x0) {
            (*(r19 + 0x10))(r19);
    }
    else {
            r21 = [[TR_DDLog loggingQueue] retain];
            var_60 = [r19 retain];
            dispatch_async(r21, &var_88);
            [var_60 release];
            [r21 release];
    }
    [r19 release];
    return;
}

-(void)clearAllColors {
    r31 = r31 - 0xa0;
    var_30 = d9;
    stack[-56] = d8;
    var_20 = r22;
    stack[-40] = r21;
    var_10 = r20;
    stack[-24] = r19;
    saved_fp = r29;
    stack[-8] = r30;
    r29 = &saved_fp;
    r20 = self;
    r0 = objc_retainBlock(&var_58);
    r19 = r0;
    if ([r20 isOnInternalLoggerQueue] != 0x0) {
            (*(r19 + 0x10))(r19);
    }
    else {
            r21 = [[TR_DDLog loggingQueue] retain];
            var_60 = [r19 retain];
            dispatch_async(r21, &var_88);
            [var_60 release];
            [r21 release];
    }
    [r19 release];
    return;
}

-(void *)loggerName {
    objc_retainAutorelease(@"cocoa.lumberjack.ttyLogger");
    return @"cocoa.lumberjack.ttyLogger";
}

-(bool)automaticallyAppendNewlineForCustomFormatters {
    r0 = *(int8_t *)(int64_t *)&self->_automaticallyAppendNewlineForCustomFormatters;
    return r0;
}

-(void)setAutomaticallyAppendNewlineForCustomFormatters:(bool)arg2 {
    *(int8_t *)(int64_t *)&self->_automaticallyAppendNewlineForCustomFormatters = arg2;
    return;
}

-(void).cxx_destruct {
    objc_storeStrong((int64_t *)&self->_colorProfilesDict, 0x0);
    objc_storeStrong((int64_t *)&self->_colorProfilesArray, 0x0);
    objc_storeStrong((int64_t *)&self->_processID, 0x0);
    objc_storeStrong((int64_t *)&self->_appName, 0x0);
    return;
}

-(void)logMessage:(void *)arg2 {
    r29 = &saved_fp;
    r31 = r31 + 0xffffffffffffffa0 - 0x1f0;
    r19 = &var_240;
    r28 = self;
    r20 = [arg2 retain];
    r23 = [r20->_message retain];
    r0 = r28->_logFormatter;
    if (r0 == 0x0) goto loc_1003ffbd4;

loc_1003ffb94:
    r21 = 0x10116cd38;
    r0 = [r0 formatLogMessage:r20];
    r29 = r29;
    r22 = [r0 retain];
    [r23 release];
    if (r22 != *(r20 + sign_extend_64(*(int32_t *)r21))) {
            r21 = 0x10116cd38;
            if (CPU_FLAGS & NE) {
                    r21 = 0x1;
            }
    }
    r23 = r22;
    if (r23 != 0x0) goto loc_1003ffbdc;

loc_10040021c:
    var_58 = **___stack_chk_guard;
    [r23 release];
    [r20 release];
    if (**___stack_chk_guard != var_58) {
            __stack_chk_fail();
    }
    return;

loc_1003ffbdc:
    if (*(int8_t *)(int64_t *)&r28->_colorsEnabled == 0x0) goto loc_1003ffd3c;

loc_1003ffbec:
    if (r20->_tag == 0x0) goto loc_1003ffc28;

loc_1003ffc00:
    r0 = r28->_colorProfilesDict;
    r0 = [r0 objectForKeyedSubscript:r2];
    r29 = r29;
    r27 = [r0 retain];
    if (r27 != 0x0) goto loc_1003ffd68;

loc_1003ffc28:
    *(int32_t *)(r19 + 0x18) = r21;
    *(int128_t *)(r19 + 0x20) = r23;
    *(int128_t *)(r19 + 0x28) = r28;
    *(int128_t *)(r19 + 0x50) = q0;
    *(int128_t *)(r19 + 0x60) = q0;
    *(int128_t *)(r19 + 0x30) = q0;
    *(int128_t *)(r19 + 0x40) = q0;
    r0 = r28->_colorProfilesArray;
    r0 = [r0 retain];
    r24 = r0;
    r1 = @selector(countByEnumeratingWithState:objects:count:);
    *(r19 + 0x10) = r1;
    r0 = objc_msgSend(r0, r1);
    r27 = 0x0;
    r26 = r0;
    if (r26 == 0x0) goto loc_1003ffd58;

loc_1003ffc78:
    r27 = 0x0;
    r25 = **(r19 + 0x40);
    goto loc_1003ffc90;

loc_1003ffc90:
    r21 = 0x0;
    goto loc_1003ffc94;

loc_1003ffc94:
    if (**(r19 + 0x40) != r25) {
            objc_enumerationMutation(r24);
    }
    r0 = *(*(r19 + 0x38) + r21 * 0x8);
    if ((r0->mask & r20->_flag) == 0x0) goto loc_1003ffd0c;

loc_1003ffccc:
    r9 = r20->_context;
    r8 = sign_extend_64(*(int32_t *)ivar_offset(context));
    r8 = *(r0 + r8);
    if (r9 == r8) goto loc_1003ffd44;

loc_1003ffcec:
    if (r8 == 0x7fffffff) {
            r8 = r27;
            r27 = [r0 retain];
            [r8 release];
    }
    goto loc_1003ffd0c;

loc_1003ffd0c:
    r21 = r21 + 0x1;
    if (r21 < r26) goto loc_1003ffc94;

loc_1003ffd18:
    r26 = objc_msgSend(r24, *(r19 + 0x10));
    if (r26 != 0x0) goto loc_1003ffc90;

loc_1003ffd58:
    [r24 release];
    r23 = *(int128_t *)(r19 + 0x20);
    r28 = *(int128_t *)(r19 + 0x28);
    r21 = *(int32_t *)(r19 + 0x18);
    goto loc_1003ffd68;

loc_1003ffd68:
    r24 = [r23 lengthOfBytesUsingEncoding:0x4];
    r22 = &var_240;
    if (r24 >= 0x1000) {
            asm { csinc      x8, x8, x24, hs };
    }
    r25 = &var_240 - (0x10 & 0xfffffffffffffff0);
    r26 = r24 + 0x1;
    r31 = r25;
    if (r24 >= 0x1000) {
            r25 = malloc(r26);
            if (r25 != 0x0) {
                    r2 = r25;
                    if (([r23 getCString:r2 maxLength:r26 encoding:0x4] & 0x1) != 0x0) {
                            if (r21 != 0x0) {
                                    r21 = r23;
                                    r23 = &var_240;
                                    r8 = sign_extend_64(*(int32_t *)ivar_offset(_automaticallyAppendNewlineForCustomFormatters));
                                    r8 = *(int8_t *)(r28 + r8);
                                    if (r8 != 0x0) {
                                            asm { cinc       w2, w9, ne };
                                    }
                                    r1 = &var_240 - (r2 << 0x4);
                                    if (r27 != 0x0) {
                                            *r1 = (int64_t *)&r27->fgCode;
                                            r9 = sign_extend_64(*(int32_t *)ivar_offset(fgCodeLen));
                                            r9 = *(r27 + r9);
                                            r10 = sign_extend_64(*(int32_t *)ivar_offset(bgCode));
                                            *(int128_t *)(r1 + 0x8) = r9;
                                            *(int128_t *)(r1 + 0x10) = r27 + r10;
                                            *(r1 + 0x18) = r27->bgCodeLen;
                                            r10 = r2 - 0x1;
                                            *(r1 + (r10 << 0x4)) = (int64_t *)&r27->resetCode;
                                            r9 = sign_extend_64(*(int32_t *)ivar_offset(resetCodeLen));
                                            r9 = *(r27 + r9);
                                    }
                                    else {
                                            r9 = 0x0;
                                            *(int128_t *)r1 = "";
                                            *(int128_t *)(r1 + 0x8) = 0x0;
                                            *(int128_t *)(r1 + 0x10) = "";
                                            *(int128_t *)(r1 + 0x18) = 0x0;
                                            r10 = r2 - 0x1;
                                            *(r1 + (r10 << 0x4)) = "";
                                    }
                                    *(0x8 + r1 + r10 * 0x10) = r9;
                                    *(int128_t *)(r1 + 0x20) = r25;
                                    *(int128_t *)(r1 + 0x28) = r24;
                                    if (r8 != 0x0) {
                                            r9 = *(int8_t *)(r25 + r24);
                                            if (r9 != 0xa) {
                                                    if (CPU_FLAGS & NE) {
                                                            r9 = 0x1;
                                                    }
                                            }
                                            *(int128_t *)(r1 + 0x30) = "\n";
                                            *(int128_t *)(r1 + 0x38) = r9;
                                    }
                                    writev(0x2, r1, r2);
                                    r23 = r21;
                            }
                            else {
                                    *(r19 + 0x20) = r22;
                                    r22 = r27;
                                    r8 = r20->_timestamp;
                                    *(r19 + 0x28) = r28;
                                    if (r8 != 0x0) {
                                            r0 = [NSCalendar autoupdatingCurrentCalendar];
                                            r0 = [r0 retain];
                                            r27 = r0;
                                            r0 = [r0 components:r28->_calendarUnitFlags fromDate:*(r20 + sign_extend_64(*(int32_t *)0x10116cd58))];
                                            r29 = r29;
                                            r26 = [r0 retain];
                                            [r27 release];
                                            [*(r20 + sign_extend_64(*(int32_t *)0x10116cd58)) timeIntervalSinceReferenceDate];
                                            asm { frintm     d1, d0 };
                                            asm { fcvtzs     w21, d0 };
                                            *(r19 + 0x18) = [r26 year];
                                            *(r19 + 0x10) = [r26 month];
                                            *(r19 + 0x8) = [r26 day];
                                            r28 = [r26 hour];
                                            [r26 minute];
                                            [r26 second];
                                            r0 = __snprintf_chk(r29 - 0xf0, 0x18, 0x0, 0x18, "%04ld-%02ld-%02ld %02ld:%02ld:%02ld:%03d", r5, r6, r7, *(r19 + 0x18), *(r19 + 0x10), *(r19 + 0x8), r28);
                                            r31 = (r31 - 0x40) + 0x40;
                                            r8 = 0x17;
                                            if (r0 < 0x17) {
                                                    if (!CPU_FLAGS & L) {
                                                            r8 = 0x17;
                                                    }
                                                    else {
                                                            r8 = r0;
                                                    }
                                            }
                                            r27 = r8 & !(r8 / 0xffffffff80000000);
                                            [r26 release];
                                    }
                                    else {
                                            r27 = 0x0;
                                    }
                                    *(r31 + 0xfffffffffffffff0) = [r20->_threadID cStringUsingEncoding:0x4];
                                    r0 = __snprintf_chk(r29 - 0xf9, 0x9, 0x0, 0x9, "%s", r5);
                                    r8 = 0x8;
                                    if (r0 < 0x8) {
                                            if (!CPU_FLAGS & L) {
                                                    r8 = 0x8;
                                            }
                                            else {
                                                    r8 = r0;
                                            }
                                    }
                                    r8 = r8 & !(r8 / 0xffffffff80000000);
                                    r12 = r22;
                                    if (r12 != 0x0) {
                                            *(r19 + 0x70) = (int64_t *)&r12->fgCode;
                                            *(r19 + 0x78) = r12->fgCodeLen;
                                            r9 = sign_extend_64(*(int32_t *)ivar_offset(bgCode));
                                            r9 = r12 + r9;
                                            *(r19 + 0x88) = r12->bgCodeLen;
                                            r11 = (int64_t *)&r12->resetCode;
                                            r10 = sign_extend_64(*(int32_t *)ivar_offset(resetCodeLen));
                                            r10 = *(r12 + r10);
                                    }
                                    else {
                                            r10 = 0x0;
                                            r9 = "";
                                            *(int128_t *)(r19 + 0x70) = r9;
                                            *(int128_t *)(r19 + 0x78) = 0x0;
                                            *(r19 + 0x88) = 0x0;
                                            r11 = r9;
                                    }
                                    r12 = *(r19 + 0x28);
                                    *(r19 + 0x80) = r9;
                                    *(int128_t *)(r19 + 0x130) = r11;
                                    *(int128_t *)(r19 + 0x138) = r10;
                                    *(int128_t *)(r19 + 0x90) = r29 - 0xf0;
                                    *(int128_t *)(r19 + 0x98) = r27;
                                    *(r19 + 0xa0) = " ";
                                    r10 = sign_extend_64(*(int32_t *)ivar_offset(_app));
                                    r10 = *(r12 + r10);
                                    *(int128_t *)(r19 + 0xa8) = 0x1;
                                    *(int128_t *)(r19 + 0xb0) = r10;
                                    *(r19 + 0xb8) = r12->_appLen;
                                    *(int128_t *)(r19 + 0xc0) = "[";
                                    *(int128_t *)(r19 + 0xc8) = 0x1;
                                    *(r19 + 0xd0) = r12->_pid;
                                    *(int128_t *)(r19 + 0xd8) = r12->_pidLen;
                                    *(int128_t *)(r19 + 0xe0) = ":";
                                    *(r19 + 0xe8) = 0x1;
                                    *(r19 + 0xf0) = r29 - 0xf9;
                                    if (r8 < 0x8) {
                                            if (!CPU_FLAGS & B) {
                                                    r8 = 0x8;
                                            }
                                            else {
                                                    r8 = r8;
                                            }
                                    }
                                    *(r19 + 0xf8) = r8;
                                    *(r19 + 0x100) = "] ";
                                    *(int128_t *)(r19 + 0x108) = 0x2;
                                    *(int128_t *)(r19 + 0x110) = r25;
                                    *(int128_t *)(r19 + 0x118) = r24;
                                    *(int128_t *)(r19 + 0x120) = "\n";
                                    r8 = *(int8_t *)(r25 + r24);
                                    if (r8 != 0xa) {
                                            if (CPU_FLAGS & NE) {
                                                    r8 = 0x1;
                                            }
                                    }
                                    *(r19 + 0x128) = r8;
                                    writev(0x2, r19 + 0x70, 0xd);
                                    r27 = r22;
                                    r22 = *(r19 + 0x20);
                            }
                    }
                    if (r24 >= 0x1000) {
                            free(r25);
                    }
            }
    }
    else {
            r2 = r25;
            if (([r23 getCString:r2 maxLength:r26 encoding:0x4] & 0x1) != 0x0) {
                    if (r21 != 0x0) {
                            r21 = r23;
                            r23 = &var_240;
                            r8 = sign_extend_64(*(int32_t *)ivar_offset(_automaticallyAppendNewlineForCustomFormatters));
                            r8 = *(int8_t *)(r28 + r8);
                            if (r8 != 0x0) {
                                    asm { cinc       w2, w9, ne };
                            }
                            r1 = &var_240 - (r2 << 0x4);
                            if (r27 != 0x0) {
                                    *r1 = (int64_t *)&r27->fgCode;
                                    r9 = sign_extend_64(*(int32_t *)ivar_offset(fgCodeLen));
                                    r9 = *(r27 + r9);
                                    r10 = sign_extend_64(*(int32_t *)ivar_offset(bgCode));
                                    *(int128_t *)(r1 + 0x8) = r9;
                                    *(int128_t *)(r1 + 0x10) = r27 + r10;
                                    *(r1 + 0x18) = r27->bgCodeLen;
                                    r10 = r2 - 0x1;
                                    *(r1 + (r10 << 0x4)) = (int64_t *)&r27->resetCode;
                                    r9 = sign_extend_64(*(int32_t *)ivar_offset(resetCodeLen));
                                    r9 = *(r27 + r9);
                            }
                            else {
                                    r9 = 0x0;
                                    *(int128_t *)r1 = "";
                                    *(int128_t *)(r1 + 0x8) = 0x0;
                                    *(int128_t *)(r1 + 0x10) = "";
                                    *(int128_t *)(r1 + 0x18) = 0x0;
                                    r10 = r2 - 0x1;
                                    *(r1 + (r10 << 0x4)) = "";
                            }
                            *(0x8 + r1 + r10 * 0x10) = r9;
                            *(int128_t *)(r1 + 0x20) = r25;
                            *(int128_t *)(r1 + 0x28) = r24;
                            if (r8 != 0x0) {
                                    r9 = *(int8_t *)(r25 + r24);
                                    if (r9 != 0xa) {
                                            if (CPU_FLAGS & NE) {
                                                    r9 = 0x1;
                                            }
                                    }
                                    *(int128_t *)(r1 + 0x30) = "\n";
                                    *(int128_t *)(r1 + 0x38) = r9;
                            }
                            writev(0x2, r1, r2);
                            r23 = r21;
                    }
                    else {
                            *(r19 + 0x20) = r22;
                            r22 = r27;
                            r8 = r20->_timestamp;
                            *(r19 + 0x28) = r28;
                            if (r8 != 0x0) {
                                    r0 = [NSCalendar autoupdatingCurrentCalendar];
                                    r0 = [r0 retain];
                                    r27 = r0;
                                    r0 = [r0 components:r28->_calendarUnitFlags fromDate:*(r20 + sign_extend_64(*(int32_t *)0x10116cd58))];
                                    r29 = r29;
                                    r26 = [r0 retain];
                                    [r27 release];
                                    [*(r20 + sign_extend_64(*(int32_t *)0x10116cd58)) timeIntervalSinceReferenceDate];
                                    asm { frintm     d1, d0 };
                                    asm { fcvtzs     w21, d0 };
                                    *(r19 + 0x18) = [r26 year];
                                    *(r19 + 0x10) = [r26 month];
                                    *(r19 + 0x8) = [r26 day];
                                    r28 = [r26 hour];
                                    [r26 minute];
                                    [r26 second];
                                    r0 = __snprintf_chk(r29 - 0xf0, 0x18, 0x0, 0x18, "%04ld-%02ld-%02ld %02ld:%02ld:%02ld:%03d", r5, r6, r7, *(r19 + 0x18), *(r19 + 0x10), *(r19 + 0x8), r28);
                                    r31 = (r31 - 0x40) + 0x40;
                                    r8 = 0x17;
                                    if (r0 < 0x17) {
                                            if (!CPU_FLAGS & L) {
                                                    r8 = 0x17;
                                            }
                                            else {
                                                    r8 = r0;
                                            }
                                    }
                                    r27 = r8 & !(r8 / 0xffffffff80000000);
                                    [r26 release];
                            }
                            else {
                                    r27 = 0x0;
                            }
                            *(r31 + 0xfffffffffffffff0) = [r20->_threadID cStringUsingEncoding:0x4];
                            r0 = __snprintf_chk(r29 - 0xf9, 0x9, 0x0, 0x9, "%s", r5);
                            r8 = 0x8;
                            if (r0 < 0x8) {
                                    if (!CPU_FLAGS & L) {
                                            r8 = 0x8;
                                    }
                                    else {
                                            r8 = r0;
                                    }
                            }
                            r8 = r8 & !(r8 / 0xffffffff80000000);
                            r12 = r22;
                            if (r12 != 0x0) {
                                    *(r19 + 0x70) = (int64_t *)&r12->fgCode;
                                    *(r19 + 0x78) = r12->fgCodeLen;
                                    r9 = sign_extend_64(*(int32_t *)ivar_offset(bgCode));
                                    r9 = r12 + r9;
                                    *(r19 + 0x88) = r12->bgCodeLen;
                                    r11 = (int64_t *)&r12->resetCode;
                                    r10 = sign_extend_64(*(int32_t *)ivar_offset(resetCodeLen));
                                    r10 = *(r12 + r10);
                            }
                            else {
                                    r10 = 0x0;
                                    r9 = "";
                                    *(int128_t *)(r19 + 0x70) = r9;
                                    *(int128_t *)(r19 + 0x78) = 0x0;
                                    *(r19 + 0x88) = 0x0;
                                    r11 = r9;
                            }
                            r12 = *(r19 + 0x28);
                            *(r19 + 0x80) = r9;
                            *(int128_t *)(r19 + 0x130) = r11;
                            *(int128_t *)(r19 + 0x138) = r10;
                            *(int128_t *)(r19 + 0x90) = r29 - 0xf0;
                            *(int128_t *)(r19 + 0x98) = r27;
                            *(r19 + 0xa0) = " ";
                            r10 = sign_extend_64(*(int32_t *)ivar_offset(_app));
                            r10 = *(r12 + r10);
                            *(int128_t *)(r19 + 0xa8) = 0x1;
                            *(int128_t *)(r19 + 0xb0) = r10;
                            *(r19 + 0xb8) = r12->_appLen;
                            *(int128_t *)(r19 + 0xc0) = "[";
                            *(int128_t *)(r19 + 0xc8) = 0x1;
                            *(r19 + 0xd0) = r12->_pid;
                            *(int128_t *)(r19 + 0xd8) = r12->_pidLen;
                            *(int128_t *)(r19 + 0xe0) = ":";
                            *(r19 + 0xe8) = 0x1;
                            *(r19 + 0xf0) = r29 - 0xf9;
                            if (r8 < 0x8) {
                                    if (!CPU_FLAGS & B) {
                                            r8 = 0x8;
                                    }
                                    else {
                                            r8 = r8;
                                    }
                            }
                            *(r19 + 0xf8) = r8;
                            *(r19 + 0x100) = "] ";
                            *(int128_t *)(r19 + 0x108) = 0x2;
                            *(int128_t *)(r19 + 0x110) = r25;
                            *(int128_t *)(r19 + 0x118) = r24;
                            *(int128_t *)(r19 + 0x120) = "\n";
                            r8 = *(int8_t *)(r25 + r24);
                            if (r8 != 0xa) {
                                    if (CPU_FLAGS & NE) {
                                            r8 = 0x1;
                                    }
                            }
                            *(r19 + 0x128) = r8;
                            writev(0x2, r19 + 0x70, 0xd);
                            r27 = r22;
                            r22 = *(r19 + 0x20);
                    }
            }
            if (r24 >= 0x1000) {
                    free(r25);
            }
    }
    [r27 release];
    goto loc_10040021c;

loc_1003ffd44:
    r25 = [r0 retain];
    [r27 release];
    r27 = r25;
    goto loc_1003ffd58;

loc_1003ffd3c:
    r27 = 0x0;
    goto loc_1003ffd68;

loc_1003ffbd4:
    r21 = 0x0;
    if (r23 == 0x0) goto loc_10040021c;
}

@end